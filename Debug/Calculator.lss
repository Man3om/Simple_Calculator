
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002e9e  00002f12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002118  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c13  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000097dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000993c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a397  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 2b 06 	call	0xc56	; 0xc56 <main>
      7a:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e6       	ldi	r26, 0x64	; 100
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e6       	ldi	r24, 0x64	; 100
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <calc>:
 * Calculate The Result Between 2 Numbers
 * Add / Sub / Divide / MUL
 */

sint32 calc(sint32 v1 , sint32 v2 , uint8 c)
{
     b36:	0f 93       	push	r16
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	2f 97       	sbiw	r28, 0x0f	; 15
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	6d 83       	std	Y+5, r22	; 0x05
     b4e:	7e 83       	std	Y+6, r23	; 0x06
     b50:	8f 83       	std	Y+7, r24	; 0x07
     b52:	98 87       	std	Y+8, r25	; 0x08
     b54:	29 87       	std	Y+9, r18	; 0x09
     b56:	3a 87       	std	Y+10, r19	; 0x0a
     b58:	4b 87       	std	Y+11, r20	; 0x0b
     b5a:	5c 87       	std	Y+12, r21	; 0x0c
     b5c:	0d 87       	std	Y+13, r16	; 0x0d
	sint32 Res = 0 ;
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	1a 82       	std	Y+2, r1	; 0x02
     b62:	1b 82       	std	Y+3, r1	; 0x03
     b64:	1c 82       	std	Y+4, r1	; 0x04

	switch(c)
     b66:	8d 85       	ldd	r24, Y+13	; 0x0d
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	3f 87       	std	Y+15, r19	; 0x0f
     b6e:	2e 87       	std	Y+14, r18	; 0x0e
     b70:	8e 85       	ldd	r24, Y+14	; 0x0e
     b72:	9f 85       	ldd	r25, Y+15	; 0x0f
     b74:	8b 32       	cpi	r24, 0x2B	; 43
     b76:	91 05       	cpc	r25, r1
     b78:	b9 f0       	breq	.+46     	; 0xba8 <calc+0x72>
     b7a:	2e 85       	ldd	r18, Y+14	; 0x0e
     b7c:	3f 85       	ldd	r19, Y+15	; 0x0f
     b7e:	2c 32       	cpi	r18, 0x2C	; 44
     b80:	31 05       	cpc	r19, r1
     b82:	3c f4       	brge	.+14     	; 0xb92 <calc+0x5c>
     b84:	8e 85       	ldd	r24, Y+14	; 0x0e
     b86:	9f 85       	ldd	r25, Y+15	; 0x0f
     b88:	8a 32       	cpi	r24, 0x2A	; 42
     b8a:	91 05       	cpc	r25, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <calc+0x5a>
     b8e:	41 c0       	rjmp	.+130    	; 0xc12 <calc+0xdc>
     b90:	52 c0       	rjmp	.+164    	; 0xc36 <calc+0x100>
     b92:	2e 85       	ldd	r18, Y+14	; 0x0e
     b94:	3f 85       	ldd	r19, Y+15	; 0x0f
     b96:	2d 32       	cpi	r18, 0x2D	; 45
     b98:	31 05       	cpc	r19, r1
     b9a:	b9 f0       	breq	.+46     	; 0xbca <calc+0x94>
     b9c:	8e 85       	ldd	r24, Y+14	; 0x0e
     b9e:	9f 85       	ldd	r25, Y+15	; 0x0f
     ba0:	8f 32       	cpi	r24, 0x2F	; 47
     ba2:	91 05       	cpc	r25, r1
     ba4:	19 f1       	breq	.+70     	; 0xbec <calc+0xb6>
     ba6:	47 c0       	rjmp	.+142    	; 0xc36 <calc+0x100>
	{
	case '+':
		Res = v1 + v2 ;
     ba8:	8d 81       	ldd	r24, Y+5	; 0x05
     baa:	9e 81       	ldd	r25, Y+6	; 0x06
     bac:	af 81       	ldd	r26, Y+7	; 0x07
     bae:	b8 85       	ldd	r27, Y+8	; 0x08
     bb0:	29 85       	ldd	r18, Y+9	; 0x09
     bb2:	3a 85       	ldd	r19, Y+10	; 0x0a
     bb4:	4b 85       	ldd	r20, Y+11	; 0x0b
     bb6:	5c 85       	ldd	r21, Y+12	; 0x0c
     bb8:	82 0f       	add	r24, r18
     bba:	93 1f       	adc	r25, r19
     bbc:	a4 1f       	adc	r26, r20
     bbe:	b5 1f       	adc	r27, r21
     bc0:	89 83       	std	Y+1, r24	; 0x01
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	ab 83       	std	Y+3, r26	; 0x03
     bc6:	bc 83       	std	Y+4, r27	; 0x04
     bc8:	36 c0       	rjmp	.+108    	; 0xc36 <calc+0x100>
		break ;
	case '-':
		Res = v1 - v2 ;
     bca:	8d 81       	ldd	r24, Y+5	; 0x05
     bcc:	9e 81       	ldd	r25, Y+6	; 0x06
     bce:	af 81       	ldd	r26, Y+7	; 0x07
     bd0:	b8 85       	ldd	r27, Y+8	; 0x08
     bd2:	29 85       	ldd	r18, Y+9	; 0x09
     bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bd6:	4b 85       	ldd	r20, Y+11	; 0x0b
     bd8:	5c 85       	ldd	r21, Y+12	; 0x0c
     bda:	82 1b       	sub	r24, r18
     bdc:	93 0b       	sbc	r25, r19
     bde:	a4 0b       	sbc	r26, r20
     be0:	b5 0b       	sbc	r27, r21
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	ab 83       	std	Y+3, r26	; 0x03
     be8:	bc 83       	std	Y+4, r27	; 0x04
     bea:	25 c0       	rjmp	.+74     	; 0xc36 <calc+0x100>
		break;
	case '/':
		Res = v1 / v2 ;
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	af 81       	ldd	r26, Y+7	; 0x07
     bf2:	b8 85       	ldd	r27, Y+8	; 0x08
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__divmodsi4>
     c04:	da 01       	movw	r26, r20
     c06:	c9 01       	movw	r24, r18
     c08:	89 83       	std	Y+1, r24	; 0x01
     c0a:	9a 83       	std	Y+2, r25	; 0x02
     c0c:	ab 83       	std	Y+3, r26	; 0x03
     c0e:	bc 83       	std	Y+4, r27	; 0x04
     c10:	12 c0       	rjmp	.+36     	; 0xc36 <calc+0x100>
		break;
	case '*':
		Res = v1 * v2 ;
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	af 81       	ldd	r26, Y+7	; 0x07
     c18:	b8 85       	ldd	r27, Y+8	; 0x08
     c1a:	29 85       	ldd	r18, Y+9	; 0x09
     c1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     c1e:	4b 85       	ldd	r20, Y+11	; 0x0b
     c20:	5c 85       	ldd	r21, Y+12	; 0x0c
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 75 16 	call	0x2cea	; 0x2cea <__mulsi3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	89 83       	std	Y+1, r24	; 0x01
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	ab 83       	std	Y+3, r26	; 0x03
     c34:	bc 83       	std	Y+4, r27	; 0x04
		break;
	default:
		break;
	}

	return Res;
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	ab 81       	ldd	r26, Y+3	; 0x03
     c3c:	bc 81       	ldd	r27, Y+4	; 0x04
}
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	2f 96       	adiw	r28, 0x0f	; 15
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	0f 91       	pop	r16
     c54:	08 95       	ret

00000c56 <main>:

/* This Code is Written for solving Simple Calculation between 2 numbers only*/

int main(void)
{
     c56:	0f 93       	push	r16
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	69 97       	sbiw	r28, 0x19	; 25
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
	/* Using Flag To Control Which Var should be stored in*/
	uint8 key = 0 , op = '+' , flag = 0 ;
     c6c:	19 8e       	std	Y+25, r1	; 0x19
     c6e:	8b e2       	ldi	r24, 0x2B	; 43
     c70:	88 8f       	std	Y+24, r24	; 0x18
     c72:	1f 8a       	std	Y+23, r1	; 0x17

	sint32 var1 = 0 , var2 = 0 ;
     c74:	1b 8a       	std	Y+19, r1	; 0x13
     c76:	1c 8a       	std	Y+20, r1	; 0x14
     c78:	1d 8a       	std	Y+21, r1	; 0x15
     c7a:	1e 8a       	std	Y+22, r1	; 0x16
     c7c:	1f 86       	std	Y+15, r1	; 0x0f
     c7e:	18 8a       	std	Y+16, r1	; 0x10
     c80:	19 8a       	std	Y+17, r1	; 0x11
     c82:	1a 8a       	std	Y+18, r1	; 0x12

	LCD_init() ; /* Initialization LCD */
     c84:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_init>

	while(1)
	{
		key = KEYPAD_getPressedKey();
     c88:	0e 94 88 0a 	call	0x1510	; 0x1510 <KEYPAD_getPressedKey>
     c8c:	89 8f       	std	Y+25, r24	; 0x19

		if(key == '=') /* Equal and Calculate The Result */
     c8e:	89 8d       	ldd	r24, Y+25	; 0x19
     c90:	8d 33       	cpi	r24, 0x3D	; 61
     c92:	11 f5       	brne	.+68     	; 0xcd8 <main+0x82>
		{
			LCD_moveCursor(1,10); /* move the cursor to Row 1 and column 10 */
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	6a e0       	ldi	r22, 0x0A	; 10
     c98:	0e 94 ed 15 	call	0x2bda	; 0x2bda <LCD_moveCursor>
			var1 = calc(var1,var2,op);
     c9c:	8b 89       	ldd	r24, Y+19	; 0x13
     c9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ca0:	ad 89       	ldd	r26, Y+21	; 0x15
     ca2:	be 89       	ldd	r27, Y+22	; 0x16
     ca4:	2f 85       	ldd	r18, Y+15	; 0x0f
     ca6:	38 89       	ldd	r19, Y+16	; 0x10
     ca8:	49 89       	ldd	r20, Y+17	; 0x11
     caa:	5a 89       	ldd	r21, Y+18	; 0x12
     cac:	bc 01       	movw	r22, r24
     cae:	cd 01       	movw	r24, r26
     cb0:	08 8d       	ldd	r16, Y+24	; 0x18
     cb2:	0e 94 9b 05 	call	0xb36	; 0xb36 <calc>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	8b 8b       	std	Y+19, r24	; 0x13
     cbc:	9c 8b       	std	Y+20, r25	; 0x14
     cbe:	ad 8b       	std	Y+21, r26	; 0x15
     cc0:	be 8b       	std	Y+22, r27	; 0x16
			LCD_intgerToString(var1);
     cc2:	8b 89       	ldd	r24, Y+19	; 0x13
     cc4:	9c 89       	ldd	r25, Y+20	; 0x14
     cc6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_intgerToString>
			flag = 2 ;
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	8f 8b       	std	Y+23, r24	; 0x17
			var2 = 0 ;
     cce:	1f 86       	std	Y+15, r1	; 0x0f
     cd0:	18 8a       	std	Y+16, r1	; 0x10
     cd2:	19 8a       	std	Y+17, r1	; 0x11
     cd4:	1a 8a       	std	Y+18, r1	; 0x12
     cd6:	6b c0       	rjmp	.+214    	; 0xdae <main+0x158>
		}
		else if(key == 13) /* on/off Button to (Clear The LCD) */
     cd8:	89 8d       	ldd	r24, Y+25	; 0x19
     cda:	8d 30       	cpi	r24, 0x0D	; 13
     cdc:	61 f4       	brne	.+24     	; 0xcf6 <main+0xa0>
		{
			LCD_clearScreen(); // Clear Screen
     cde:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_clearScreen>
			var1 = 0 ;
     ce2:	1b 8a       	std	Y+19, r1	; 0x13
     ce4:	1c 8a       	std	Y+20, r1	; 0x14
     ce6:	1d 8a       	std	Y+21, r1	; 0x15
     ce8:	1e 8a       	std	Y+22, r1	; 0x16
			flag = 0 ;
     cea:	1f 8a       	std	Y+23, r1	; 0x17
			var2 = 0 ;
     cec:	1f 86       	std	Y+15, r1	; 0x0f
     cee:	18 8a       	std	Y+16, r1	; 0x10
     cf0:	19 8a       	std	Y+17, r1	; 0x11
     cf2:	1a 8a       	std	Y+18, r1	; 0x12
     cf4:	5c c0       	rjmp	.+184    	; 0xdae <main+0x158>
		}
		else if((key >= 0) && (key <= 9)) /* Store The 2 Numbers */
     cf6:	89 8d       	ldd	r24, Y+25	; 0x19
     cf8:	8a 30       	cpi	r24, 0x0A	; 10
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <main+0xa8>
     cfc:	45 c0       	rjmp	.+138    	; 0xd88 <main+0x132>
		{
			if(flag == 0)
     cfe:	8f 89       	ldd	r24, Y+23	; 0x17
     d00:	88 23       	and	r24, r24
     d02:	09 f5       	brne	.+66     	; 0xd46 <main+0xf0>
			{
				var1 = (var1 * 10) + key ;
     d04:	8b 89       	ldd	r24, Y+19	; 0x13
     d06:	9c 89       	ldd	r25, Y+20	; 0x14
     d08:	ad 89       	ldd	r26, Y+21	; 0x15
     d0a:	be 89       	ldd	r27, Y+22	; 0x16
     d0c:	2a e0       	ldi	r18, 0x0A	; 10
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 75 16 	call	0x2cea	; 0x2cea <__mulsi3>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	89 8d       	ldd	r24, Y+25	; 0x19
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	82 0f       	add	r24, r18
     d2c:	93 1f       	adc	r25, r19
     d2e:	a4 1f       	adc	r26, r20
     d30:	b5 1f       	adc	r27, r21
     d32:	8b 8b       	std	Y+19, r24	; 0x13
     d34:	9c 8b       	std	Y+20, r25	; 0x14
     d36:	ad 8b       	std	Y+21, r26	; 0x15
     d38:	be 8b       	std	Y+22, r27	; 0x16
				LCD_intgerToString(key);
     d3a:	89 8d       	ldd	r24, Y+25	; 0x19
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_intgerToString>
     d44:	34 c0       	rjmp	.+104    	; 0xdae <main+0x158>
			}
			else
			{
				var2 = (var2 * 10) + key ;
     d46:	8f 85       	ldd	r24, Y+15	; 0x0f
     d48:	98 89       	ldd	r25, Y+16	; 0x10
     d4a:	a9 89       	ldd	r26, Y+17	; 0x11
     d4c:	ba 89       	ldd	r27, Y+18	; 0x12
     d4e:	2a e0       	ldi	r18, 0x0A	; 10
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 75 16 	call	0x2cea	; 0x2cea <__mulsi3>
     d5e:	9b 01       	movw	r18, r22
     d60:	ac 01       	movw	r20, r24
     d62:	89 8d       	ldd	r24, Y+25	; 0x19
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a0 e0       	ldi	r26, 0x00	; 0
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	82 0f       	add	r24, r18
     d6e:	93 1f       	adc	r25, r19
     d70:	a4 1f       	adc	r26, r20
     d72:	b5 1f       	adc	r27, r21
     d74:	8f 87       	std	Y+15, r24	; 0x0f
     d76:	98 8b       	std	Y+16, r25	; 0x10
     d78:	a9 8b       	std	Y+17, r26	; 0x11
     d7a:	ba 8b       	std	Y+18, r27	; 0x12
				LCD_intgerToString(key);
     d7c:	89 8d       	ldd	r24, Y+25	; 0x19
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 48 16 	call	0x2c90	; 0x2c90 <LCD_intgerToString>
     d86:	13 c0       	rjmp	.+38     	; 0xdae <main+0x158>
		}
		else /* Enter here if The operator's Button was pressed */
		{
			/* Enter here if the user wants to perform a calculation
			 * on the previous output */
			if(flag == 2)
     d88:	8f 89       	ldd	r24, Y+23	; 0x17
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	49 f4       	brne	.+18     	; 0xda0 <main+0x14a>
			{
				LCD_clearScreen(); // Clear Screen
     d8e:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <LCD_clearScreen>
				LCD_sendCommand(LCD_GO_TO_HOME);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
				LCD_displayString("Ans");
     d98:	80 e6       	ldi	r24, 0x60	; 96
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayString>
			}

			op = key ;
     da0:	89 8d       	ldd	r24, Y+25	; 0x19
     da2:	88 8f       	std	Y+24, r24	; 0x18
			LCD_displayCharacter(key);
     da4:	89 8d       	ldd	r24, Y+25	; 0x19
     da6:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_displayCharacter>
			flag = 1 ;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	8f 8b       	std	Y+23, r24	; 0x17
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	aa ef       	ldi	r26, 0xFA	; 250
     db4:	b3 e4       	ldi	r27, 0x43	; 67
     db6:	8b 87       	std	Y+11, r24	; 0x0b
     db8:	9c 87       	std	Y+12, r25	; 0x0c
     dba:	ad 87       	std	Y+13, r26	; 0x0d
     dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a e7       	ldi	r20, 0x7A	; 122
     dcc:	55 e4       	ldi	r21, 0x45	; 69
     dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	8f 83       	std	Y+7, r24	; 0x07
     dd8:	98 87       	std	Y+8, r25	; 0x08
     dda:	a9 87       	std	Y+9, r26	; 0x09
     ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dde:	6f 81       	ldd	r22, Y+7	; 0x07
     de0:	78 85       	ldd	r23, Y+8	; 0x08
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     df2:	88 23       	and	r24, r24
     df4:	2c f4       	brge	.+10     	; 0xe00 <main+0x1aa>
		__ticks = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9e 83       	std	Y+6, r25	; 0x06
     dfc:	8d 83       	std	Y+5, r24	; 0x05
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <main+0x228>
	else if (__tmp > 65535)
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e14:	18 16       	cp	r1, r24
     e16:	4c f5       	brge	.+82     	; 0xe6a <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e18:	6b 85       	ldd	r22, Y+11	; 0x0b
     e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2c:	dc 01       	movw	r26, r24
     e2e:	cb 01       	movw	r24, r22
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9e 83       	std	Y+6, r25	; 0x06
     e3e:	8d 83       	std	Y+5, r24	; 0x05
     e40:	0f c0       	rjmp	.+30     	; 0xe60 <main+0x20a>
     e42:	80 e9       	ldi	r24, 0x90	; 144
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <main+0x1f8>
     e52:	9c 83       	std	Y+4, r25	; 0x04
     e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	8d 81       	ldd	r24, Y+5	; 0x05
     e58:	9e 81       	ldd	r25, Y+6	; 0x06
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	69 f7       	brne	.-38     	; 0xe42 <main+0x1ec>
     e68:	0f cf       	rjmp	.-482    	; 0xc88 <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6a:	6f 81       	ldd	r22, Y+7	; 0x07
     e6c:	78 85       	ldd	r23, Y+8	; 0x08
     e6e:	89 85       	ldd	r24, Y+9	; 0x09
     e70:	9a 85       	ldd	r25, Y+10	; 0x0a
     e72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <main+0x234>
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	fa ce       	rjmp	.-524    	; 0xc88 <main+0x32>

00000e94 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <GPIO_setupPinDirection+0x6>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <GPIO_setupPinDirection+0x8>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6a 83       	std	Y+2, r22	; 0x02
     ea6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <GPIO_setupPinDirection+0x1c>
     eae:	d5 c0       	rjmp	.+426    	; 0x105a <GPIO_setupPinDirection+0x1c6>
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	84 30       	cpi	r24, 0x04	; 4
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <GPIO_setupPinDirection+0x24>
     eb6:	d1 c0       	rjmp	.+418    	; 0x105a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3d 83       	std	Y+5, r19	; 0x05
     ec0:	2c 83       	std	Y+4, r18	; 0x04
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <GPIO_setupPinDirection+0x3a>
     ecc:	43 c0       	rjmp	.+134    	; 0xf54 <GPIO_setupPinDirection+0xc0>
     ece:	2c 81       	ldd	r18, Y+4	; 0x04
     ed0:	3d 81       	ldd	r19, Y+5	; 0x05
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	2c f4       	brge	.+10     	; 0xee2 <GPIO_setupPinDirection+0x4e>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	71 f0       	breq	.+28     	; 0xefc <GPIO_setupPinDirection+0x68>
     ee0:	bc c0       	rjmp	.+376    	; 0x105a <GPIO_setupPinDirection+0x1c6>
     ee2:	2c 81       	ldd	r18, Y+4	; 0x04
     ee4:	3d 81       	ldd	r19, Y+5	; 0x05
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <GPIO_setupPinDirection+0x5a>
     eec:	5f c0       	rjmp	.+190    	; 0xfac <GPIO_setupPinDirection+0x118>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <GPIO_setupPinDirection+0x66>
     ef8:	85 c0       	rjmp	.+266    	; 0x1004 <GPIO_setupPinDirection+0x170>
     efa:	af c0       	rjmp	.+350    	; 0x105a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	a1 f4       	brne	.+40     	; 0xf2a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f02:	aa e3       	ldi	r26, 0x3A	; 58
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	ea e3       	ldi	r30, 0x3A	; 58
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_setupPinDirection+0x8c>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_setupPinDirection+0x88>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	98 c0       	rjmp	.+304    	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f2a:	aa e3       	ldi	r26, 0x3A	; 58
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <GPIO_setupPinDirection+0xb4>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <GPIO_setupPinDirection+0xb0>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	83 c0       	rjmp	.+262    	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	a1 f4       	brne	.+40     	; 0xf82 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f5a:	a7 e3       	ldi	r26, 0x37	; 55
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e7 e3       	ldi	r30, 0x37	; 55
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <GPIO_setupPinDirection+0xe4>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <GPIO_setupPinDirection+0xe0>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	6c c0       	rjmp	.+216    	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f82:	a7 e3       	ldi	r26, 0x37	; 55
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e7 e3       	ldi	r30, 0x37	; 55
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_setupPinDirection+0x10c>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_setupPinDirection+0x108>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	57 c0       	rjmp	.+174    	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fb2:	a4 e3       	ldi	r26, 0x34	; 52
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e4 e3       	ldi	r30, 0x34	; 52
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_setupPinDirection+0x13c>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_setupPinDirection+0x138>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	40 c0       	rjmp	.+128    	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     fda:	a4 e3       	ldi	r26, 0x34	; 52
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e4 e3       	ldi	r30, 0x34	; 52
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_setupPinDirection+0x164>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_setupPinDirection+0x160>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	2b c0       	rjmp	.+86     	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	a1 f4       	brne	.+40     	; 0x1032 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    100a:	a1 e3       	ldi	r26, 0x31	; 49
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_setupPinDirection+0x194>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_setupPinDirection+0x190>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	14 c0       	rjmp	.+40     	; 0x105a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1032:	a1 e3       	ldi	r26, 0x31	; 49
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e1 e3       	ldi	r30, 0x31	; 49
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <GPIO_setupPinDirection+0x1bc>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <GPIO_setupPinDirection+0x1b8>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <GPIO_writePin+0x6>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <GPIO_writePin+0x8>
    1072:	0f 92       	push	r0
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	6a 83       	std	Y+2, r22	; 0x02
    107c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	08 f0       	brcs	.+2      	; 0x1086 <GPIO_writePin+0x1c>
    1084:	d5 c0       	rjmp	.+426    	; 0x1230 <GPIO_writePin+0x1c6>
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	08 f0       	brcs	.+2      	; 0x108e <GPIO_writePin+0x24>
    108c:	d1 c0       	rjmp	.+418    	; 0x1230 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	3d 83       	std	Y+5, r19	; 0x05
    1096:	2c 83       	std	Y+4, r18	; 0x04
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <GPIO_writePin+0x3a>
    10a2:	43 c0       	rjmp	.+134    	; 0x112a <GPIO_writePin+0xc0>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <GPIO_writePin+0x4e>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <GPIO_writePin+0x68>
    10b6:	bc c0       	rjmp	.+376    	; 0x1230 <GPIO_writePin+0x1c6>
    10b8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ba:	3d 81       	ldd	r19, Y+5	; 0x05
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <GPIO_writePin+0x5a>
    10c2:	5f c0       	rjmp	.+190    	; 0x1182 <GPIO_writePin+0x118>
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	9d 81       	ldd	r25, Y+5	; 0x05
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	91 05       	cpc	r25, r1
    10cc:	09 f4       	brne	.+2      	; 0x10d0 <GPIO_writePin+0x66>
    10ce:	85 c0       	rjmp	.+266    	; 0x11da <GPIO_writePin+0x170>
    10d0:	af c0       	rjmp	.+350    	; 0x1230 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10d8:	ab e3       	ldi	r26, 0x3B	; 59
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	eb e3       	ldi	r30, 0x3B	; 59
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_writePin+0x8c>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_writePin+0x88>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	98 c0       	rjmp	.+304    	; 0x1230 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1100:	ab e3       	ldi	r26, 0x3B	; 59
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_writePin+0xb4>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_writePin+0xb0>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	83 c0       	rjmp	.+262    	; 0x1230 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	a1 f4       	brne	.+40     	; 0x1158 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_writePin+0xe4>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_writePin+0xe0>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	6c c0       	rjmp	.+216    	; 0x1230 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1158:	a8 e3       	ldi	r26, 0x38	; 56
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e8 e3       	ldi	r30, 0x38	; 56
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_writePin+0x10c>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_writePin+0x108>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	57 c0       	rjmp	.+174    	; 0x1230 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	a1 f4       	brne	.+40     	; 0x11b0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1188:	a5 e3       	ldi	r26, 0x35	; 53
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e3       	ldi	r30, 0x35	; 53
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_writePin+0x13c>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_writePin+0x138>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	40 c0       	rjmp	.+128    	; 0x1230 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11b0:	a5 e3       	ldi	r26, 0x35	; 53
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e5 e3       	ldi	r30, 0x35	; 53
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_writePin+0x164>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_writePin+0x160>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
    11d8:	2b c0       	rjmp	.+86     	; 0x1230 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	a1 f4       	brne	.+40     	; 0x1208 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_writePin+0x194>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_writePin+0x190>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1208:	a2 e3       	ldi	r26, 0x32	; 50
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e2 e3       	ldi	r30, 0x32	; 50
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <GPIO_writePin+0x1bc>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <GPIO_writePin+0x1b8>
    122a:	80 95       	com	r24
    122c:	84 23       	and	r24, r20
    122e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <GPIO_readPin+0x6>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_readPin+0x8>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1252:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	08 f0       	brcs	.+2      	; 0x125c <GPIO_readPin+0x1c>
    125a:	84 c0       	rjmp	.+264    	; 0x1364 <GPIO_readPin+0x124>
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	08 f0       	brcs	.+2      	; 0x1264 <GPIO_readPin+0x24>
    1262:	80 c0       	rjmp	.+256    	; 0x1364 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3d 83       	std	Y+5, r19	; 0x05
    126c:	2c 83       	std	Y+4, r18	; 0x04
    126e:	4c 81       	ldd	r20, Y+4	; 0x04
    1270:	5d 81       	ldd	r21, Y+5	; 0x05
    1272:	41 30       	cpi	r20, 0x01	; 1
    1274:	51 05       	cpc	r21, r1
    1276:	79 f1       	breq	.+94     	; 0x12d6 <GPIO_readPin+0x96>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	91 05       	cpc	r25, r1
    1280:	34 f4       	brge	.+12     	; 0x128e <GPIO_readPin+0x4e>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	69 f0       	breq	.+26     	; 0x12a6 <GPIO_readPin+0x66>
    128c:	6b c0       	rjmp	.+214    	; 0x1364 <GPIO_readPin+0x124>
    128e:	4c 81       	ldd	r20, Y+4	; 0x04
    1290:	5d 81       	ldd	r21, Y+5	; 0x05
    1292:	42 30       	cpi	r20, 0x02	; 2
    1294:	51 05       	cpc	r21, r1
    1296:	b9 f1       	breq	.+110    	; 0x1306 <GPIO_readPin+0xc6>
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <GPIO_readPin+0x64>
    12a2:	49 c0       	rjmp	.+146    	; 0x1336 <GPIO_readPin+0xf6>
    12a4:	5f c0       	rjmp	.+190    	; 0x1364 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12a6:	e9 e3       	ldi	r30, 0x39	; 57
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_readPin+0x7e>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_readPin+0x7a>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	90 70       	andi	r25, 0x00	; 0
    12c8:	88 23       	and	r24, r24
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	49 c0       	rjmp	.+146    	; 0x1364 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	47 c0       	rjmp	.+142    	; 0x1364 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12d6:	e6 e3       	ldi	r30, 0x36	; 54
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_readPin+0xae>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_readPin+0xaa>
    12f2:	ca 01       	movw	r24, r20
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	88 23       	and	r24, r24
    12fa:	19 f0       	breq	.+6      	; 0x1302 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	31 c0       	rjmp	.+98     	; 0x1364 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	2f c0       	rjmp	.+94     	; 0x1364 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1306:	e3 e3       	ldi	r30, 0x33	; 51
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_readPin+0xde>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_readPin+0xda>
    1322:	ca 01       	movw	r24, r20
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	90 70       	andi	r25, 0x00	; 0
    1328:	88 23       	and	r24, r24
    132a:	19 f0       	breq	.+6      	; 0x1332 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	19 c0       	rjmp	.+50     	; 0x1364 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1332:	19 82       	std	Y+1, r1	; 0x01
    1334:	17 c0       	rjmp	.+46     	; 0x1364 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1336:	e0 e3       	ldi	r30, 0x30	; 48
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a9 01       	movw	r20, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_readPin+0x10e>
    134a:	55 95       	asr	r21
    134c:	47 95       	ror	r20
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_readPin+0x10a>
    1352:	ca 01       	movw	r24, r20
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	90 70       	andi	r25, 0x00	; 0
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1362:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <GPIO_setupPortDirection+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <GPIO_setupPortDirection+0x8>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	90 f5       	brcc	.+100    	; 0x13f0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3c 83       	std	Y+4, r19	; 0x04
    1394:	2b 83       	std	Y+3, r18	; 0x03
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	d1 f0       	breq	.+52     	; 0x13d4 <GPIO_setupPortDirection+0x5e>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <GPIO_setupPortDirection+0x3e>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	61 f0       	breq	.+24     	; 0x13ca <GPIO_setupPortDirection+0x54>
    13b2:	1e c0       	rjmp	.+60     	; 0x13f0 <GPIO_setupPortDirection+0x7a>
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	81 f0       	breq	.+32     	; 0x13de <GPIO_setupPortDirection+0x68>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	91 05       	cpc	r25, r1
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <GPIO_setupPortDirection+0x72>
    13c8:	13 c0       	rjmp	.+38     	; 0x13f0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	80 83       	st	Z, r24
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13d4:	e7 e3       	ldi	r30, 0x37	; 55
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	80 83       	st	Z, r24
    13dc:	09 c0       	rjmp	.+18     	; 0x13f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13de:	e4 e3       	ldi	r30, 0x34	; 52
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	80 83       	st	Z, r24
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13e8:	e1 e3       	ldi	r30, 0x31	; 49
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 83       	st	Z, r24
			break;
		}
	}
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <GPIO_writePort+0x6>
    1404:	00 d0       	rcall	.+0      	; 0x1406 <GPIO_writePort+0x8>
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	90 f5       	brcc	.+100    	; 0x1478 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3c 83       	std	Y+4, r19	; 0x04
    141c:	2b 83       	std	Y+3, r18	; 0x03
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	d1 f0       	breq	.+52     	; 0x145c <GPIO_writePort+0x5e>
    1428:	2b 81       	ldd	r18, Y+3	; 0x03
    142a:	3c 81       	ldd	r19, Y+4	; 0x04
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	2c f4       	brge	.+10     	; 0x143c <GPIO_writePort+0x3e>
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	61 f0       	breq	.+24     	; 0x1452 <GPIO_writePort+0x54>
    143a:	1e c0       	rjmp	.+60     	; 0x1478 <GPIO_writePort+0x7a>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	81 f0       	breq	.+32     	; 0x1466 <GPIO_writePort+0x68>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	81 f0       	breq	.+32     	; 0x1470 <GPIO_writePort+0x72>
    1450:	13 c0       	rjmp	.+38     	; 0x1478 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1452:	eb e3       	ldi	r30, 0x3B	; 59
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	80 83       	st	Z, r24
    145a:	0e c0       	rjmp	.+28     	; 0x1478 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    145c:	e8 e3       	ldi	r30, 0x38	; 56
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	80 83       	st	Z, r24
    1464:	09 c0       	rjmp	.+18     	; 0x1478 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1466:	e5 e3       	ldi	r30, 0x35	; 53
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	80 83       	st	Z, r24
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1470:	e2 e3       	ldi	r30, 0x32	; 50
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
			break;
		}
	}
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <GPIO_readPort+0x6>
    148c:	00 d0       	rcall	.+0      	; 0x148e <GPIO_readPort+0x8>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1494:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	90 f5       	brcc	.+100    	; 0x1500 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	d1 f0       	breq	.+52     	; 0x14e4 <GPIO_readPort+0x5e>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <GPIO_readPort+0x3e>
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	61 f0       	breq	.+24     	; 0x14da <GPIO_readPort+0x54>
    14c2:	1e c0       	rjmp	.+60     	; 0x1500 <GPIO_readPort+0x7a>
    14c4:	2b 81       	ldd	r18, Y+3	; 0x03
    14c6:	3c 81       	ldd	r19, Y+4	; 0x04
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	81 f0       	breq	.+32     	; 0x14ee <GPIO_readPort+0x68>
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	83 30       	cpi	r24, 0x03	; 3
    14d4:	91 05       	cpc	r25, r1
    14d6:	81 f0       	breq	.+32     	; 0x14f8 <GPIO_readPort+0x72>
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14da:	e9 e3       	ldi	r30, 0x39	; 57
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	0e c0       	rjmp	.+28     	; 0x1500 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14e4:	e6 e3       	ldi	r30, 0x36	; 54
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	89 83       	std	Y+1, r24	; 0x01
    14ec:	09 c0       	rjmp	.+18     	; 0x1500 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14ee:	e3 e3       	ldi	r30, 0x33	; 51
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14f8:	e0 e3       	ldi	r30, 0x30	; 48
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
}
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	60 97       	sbiw	r28, 0x10	; 16
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	65 e0       	ldi	r22, 0x05	; 5
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	66 e0       	ldi	r22, 0x06	; 6
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	67 e0       	ldi	r22, 0x07	; 7
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    154c:	83 e0       	ldi	r24, 0x03	; 3
    154e:	62 e0       	ldi	r22, 0x02	; 2
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	63 e0       	ldi	r22, 0x03	; 3
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	64 e0       	ldi	r22, 0x04	; 4
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    156a:	83 e0       	ldi	r24, 0x03	; 3
    156c:	65 e0       	ldi	r22, 0x05	; 5
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1574:	1f 86       	std	Y+15, r1	; 0x0f
    1576:	b4 c0       	rjmp	.+360    	; 0x16e0 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1578:	8f 85       	ldd	r24, Y+15	; 0x0f
    157a:	98 2f       	mov	r25, r24
    157c:	9c 5f       	subi	r25, 0xFC	; 252
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	69 2f       	mov	r22, r25
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	98 2f       	mov	r25, r24
    158c:	9c 5f       	subi	r25, 0xFC	; 252
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	69 2f       	mov	r22, r25
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1598:	18 8a       	std	Y+16, r1	; 0x10
    159a:	22 c0       	rjmp	.+68     	; 0x15e0 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    159c:	88 89       	ldd	r24, Y+16	; 0x10
    159e:	98 2f       	mov	r25, r24
    15a0:	9e 5f       	subi	r25, 0xFE	; 254
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	69 2f       	mov	r22, r25
    15a6:	0e 94 20 09 	call	0x1240	; 0x1240 <GPIO_readPin>
    15aa:	88 23       	and	r24, r24
    15ac:	b1 f4       	brne	.+44     	; 0x15da <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    15ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b0:	88 2f       	mov	r24, r24
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	98 2f       	mov	r25, r24
    15be:	88 89       	ldd	r24, Y+16	; 0x10
    15c0:	89 0f       	add	r24, r25
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    15c8:	60 96       	adiw	r28, 0x10	; 16
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15da:	88 89       	ldd	r24, Y+16	; 0x10
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	88 8b       	std	Y+16, r24	; 0x10
    15e0:	88 89       	ldd	r24, Y+16	; 0x10
    15e2:	84 30       	cpi	r24, 0x04	; 4
    15e4:	d8 f2       	brcs	.-74     	; 0x159c <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	98 2f       	mov	r25, r24
    15ea:	9c 5f       	subi	r25, 0xFC	; 252
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	69 2f       	mov	r22, r25
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 ea       	ldi	r26, 0xA0	; 160
    15fc:	b0 e4       	ldi	r27, 0x40	; 64
    15fe:	8b 87       	std	Y+11, r24	; 0x0b
    1600:	9c 87       	std	Y+12, r25	; 0x0c
    1602:	ad 87       	std	Y+13, r26	; 0x0d
    1604:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1606:	6b 85       	ldd	r22, Y+11	; 0x0b
    1608:	7c 85       	ldd	r23, Y+12	; 0x0c
    160a:	8d 85       	ldd	r24, Y+13	; 0x0d
    160c:	9e 85       	ldd	r25, Y+14	; 0x0e
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a e7       	ldi	r20, 0x7A	; 122
    1614:	55 e4       	ldi	r21, 0x45	; 69
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8f 83       	std	Y+7, r24	; 0x07
    1620:	98 87       	std	Y+8, r25	; 0x08
    1622:	a9 87       	std	Y+9, r26	; 0x09
    1624:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1626:	6f 81       	ldd	r22, Y+7	; 0x07
    1628:	78 85       	ldd	r23, Y+8	; 0x08
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    163a:	88 23       	and	r24, r24
    163c:	2c f4       	brge	.+10     	; 0x1648 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	3f c0       	rjmp	.+126    	; 0x16c6 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1648:	6f 81       	ldd	r22, Y+7	; 0x07
    164a:	78 85       	ldd	r23, Y+8	; 0x08
    164c:	89 85       	ldd	r24, Y+9	; 0x09
    164e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	3f ef       	ldi	r19, 0xFF	; 255
    1654:	4f e7       	ldi	r20, 0x7F	; 127
    1656:	57 e4       	ldi	r21, 0x47	; 71
    1658:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    165c:	18 16       	cp	r1, r24
    165e:	4c f5       	brge	.+82     	; 0x16b2 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1660:	6b 85       	ldd	r22, Y+11	; 0x0b
    1662:	7c 85       	ldd	r23, Y+12	; 0x0c
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e2       	ldi	r20, 0x20	; 32
    166e:	51 e4       	ldi	r21, 0x41	; 65
    1670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	bc 01       	movw	r22, r24
    167a:	cd 01       	movw	r24, r26
    167c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e 83       	std	Y+6, r25	; 0x06
    1686:	8d 83       	std	Y+5, r24	; 0x05
    1688:	0f c0       	rjmp	.+30     	; 0x16a8 <KEYPAD_getPressedKey+0x198>
    168a:	80 e9       	ldi	r24, 0x90	; 144
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	9c 83       	std	Y+4, r25	; 0x04
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <KEYPAD_getPressedKey+0x186>
    169a:	9c 83       	std	Y+4, r25	; 0x04
    169c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	69 f7       	brne	.-38     	; 0x168a <KEYPAD_getPressedKey+0x17a>
    16b0:	14 c0       	rjmp	.+40     	; 0x16da <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <KEYPAD_getPressedKey+0x1c2>
    16d6:	9a 83       	std	Y+2, r25	; 0x02
    16d8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    16da:	8f 85       	ldd	r24, Y+15	; 0x0f
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	8f 87       	std	Y+15, r24	; 0x0f
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	84 30       	cpi	r24, 0x04	; 4
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <KEYPAD_getPressedKey+0x1d8>
    16e6:	48 cf       	rjmp	.-368    	; 0x1578 <KEYPAD_getPressedKey+0x68>
    16e8:	45 cf       	rjmp	.-374    	; 0x1574 <KEYPAD_getPressedKey+0x64>

000016ea <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    16f0:	00 d0       	rcall	.+0      	; 0x16f2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    16f8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3c 83       	std	Y+4, r19	; 0x04
    1702:	2b 83       	std	Y+3, r18	; 0x03
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	88 30       	cpi	r24, 0x08	; 8
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <KEYPAD_4x4_adjustKeyNumber+0x26>
    170e:	70 c0       	rjmp	.+224    	; 0x17f0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1710:	2b 81       	ldd	r18, Y+3	; 0x03
    1712:	3c 81       	ldd	r19, Y+4	; 0x04
    1714:	29 30       	cpi	r18, 0x09	; 9
    1716:	31 05       	cpc	r19, r1
    1718:	5c f5       	brge	.+86     	; 0x1770 <KEYPAD_4x4_adjustKeyNumber+0x86>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	91 05       	cpc	r25, r1
    1722:	09 f4       	brne	.+2      	; 0x1726 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1724:	59 c0       	rjmp	.+178    	; 0x17d8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	25 30       	cpi	r18, 0x05	; 5
    172c:	31 05       	cpc	r19, r1
    172e:	9c f4       	brge	.+38     	; 0x1756 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <KEYPAD_4x4_adjustKeyNumber+0x52>
    173a:	48 c0       	rjmp	.+144    	; 0x17cc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    173c:	2b 81       	ldd	r18, Y+3	; 0x03
    173e:	3c 81       	ldd	r19, Y+4	; 0x04
    1740:	23 30       	cpi	r18, 0x03	; 3
    1742:	31 05       	cpc	r19, r1
    1744:	0c f0       	brlt	.+2      	; 0x1748 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1746:	45 c0       	rjmp	.+138    	; 0x17d2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1752:	39 c0       	rjmp	.+114    	; 0x17c6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1754:	67 c0       	rjmp	.+206    	; 0x1824 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1756:	2b 81       	ldd	r18, Y+3	; 0x03
    1758:	3c 81       	ldd	r19, Y+4	; 0x04
    175a:	26 30       	cpi	r18, 0x06	; 6
    175c:	31 05       	cpc	r19, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1760:	41 c0       	rjmp	.+130    	; 0x17e4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	87 30       	cpi	r24, 0x07	; 7
    1768:	91 05       	cpc	r25, r1
    176a:	0c f0       	brlt	.+2      	; 0x176e <KEYPAD_4x4_adjustKeyNumber+0x84>
    176c:	3e c0       	rjmp	.+124    	; 0x17ea <KEYPAD_4x4_adjustKeyNumber+0x100>
    176e:	37 c0       	rjmp	.+110    	; 0x17de <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	3c 81       	ldd	r19, Y+4	; 0x04
    1774:	2c 30       	cpi	r18, 0x0C	; 12
    1776:	31 05       	cpc	r19, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <KEYPAD_4x4_adjustKeyNumber+0x92>
    177a:	46 c0       	rjmp	.+140    	; 0x1808 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	8d 30       	cpi	r24, 0x0D	; 13
    1782:	91 05       	cpc	r25, r1
    1784:	5c f4       	brge	.+22     	; 0x179c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1786:	2b 81       	ldd	r18, Y+3	; 0x03
    1788:	3c 81       	ldd	r19, Y+4	; 0x04
    178a:	2a 30       	cpi	r18, 0x0A	; 10
    178c:	31 05       	cpc	r19, r1
    178e:	b1 f1       	breq	.+108    	; 0x17fc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	8b 30       	cpi	r24, 0x0B	; 11
    1796:	91 05       	cpc	r25, r1
    1798:	a4 f5       	brge	.+104    	; 0x1802 <KEYPAD_4x4_adjustKeyNumber+0x118>
    179a:	2d c0       	rjmp	.+90     	; 0x17f6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    179c:	2b 81       	ldd	r18, Y+3	; 0x03
    179e:	3c 81       	ldd	r19, Y+4	; 0x04
    17a0:	2e 30       	cpi	r18, 0x0E	; 14
    17a2:	31 05       	cpc	r19, r1
    17a4:	b9 f1       	breq	.+110    	; 0x1814 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	8e 30       	cpi	r24, 0x0E	; 14
    17ac:	91 05       	cpc	r25, r1
    17ae:	7c f1       	brlt	.+94     	; 0x180e <KEYPAD_4x4_adjustKeyNumber+0x124>
    17b0:	2b 81       	ldd	r18, Y+3	; 0x03
    17b2:	3c 81       	ldd	r19, Y+4	; 0x04
    17b4:	2f 30       	cpi	r18, 0x0F	; 15
    17b6:	31 05       	cpc	r19, r1
    17b8:	79 f1       	breq	.+94     	; 0x1818 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	80 31       	cpi	r24, 0x10	; 16
    17c0:	91 05       	cpc	r25, r1
    17c2:	69 f1       	breq	.+90     	; 0x181e <KEYPAD_4x4_adjustKeyNumber+0x134>
    17c4:	2f c0       	rjmp	.+94     	; 0x1824 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    17c6:	87 e0       	ldi	r24, 0x07	; 7
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	2e c0       	rjmp	.+92     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    17cc:	88 e0       	ldi	r24, 0x08	; 8
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	2b c0       	rjmp	.+86     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    17d2:	89 e0       	ldi	r24, 0x09	; 9
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	28 c0       	rjmp	.+80     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    17d8:	8f e2       	ldi	r24, 0x2F	; 47
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	25 c0       	rjmp	.+74     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    17de:	84 e0       	ldi	r24, 0x04	; 4
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	22 c0       	rjmp	.+68     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    17e4:	85 e0       	ldi	r24, 0x05	; 5
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	1f c0       	rjmp	.+62     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    17ea:	86 e0       	ldi	r24, 0x06	; 6
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	1c c0       	rjmp	.+56     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    17f0:	8a e2       	ldi	r24, 0x2A	; 42
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	19 c0       	rjmp	.+50     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	10 c0       	rjmp	.+32     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1808:	8d e2       	ldi	r24, 0x2D	; 45
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	0d c0       	rjmp	.+26     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    180e:	8d e0       	ldi	r24, 0x0D	; 13
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1814:	19 82       	std	Y+1, r1	; 0x01
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1818:	8d e3       	ldi	r24, 0x3D	; 61
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    181e:	8b e2       	ldi	r24, 0x2B	; 43
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
} 
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	2e 97       	sbiw	r28, 0x0e	; 14
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	62 e0       	ldi	r22, 0x02	; 2
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 ea       	ldi	r26, 0xA0	; 160
    1866:	b1 e4       	ldi	r27, 0x41	; 65
    1868:	8b 87       	std	Y+11, r24	; 0x0b
    186a:	9c 87       	std	Y+12, r25	; 0x0c
    186c:	ad 87       	std	Y+13, r26	; 0x0d
    186e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6b 85       	ldd	r22, Y+11	; 0x0b
    1872:	7c 85       	ldd	r23, Y+12	; 0x0c
    1874:	8d 85       	ldd	r24, Y+13	; 0x0d
    1876:	9e 85       	ldd	r25, Y+14	; 0x0e
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a e7       	ldi	r20, 0x7A	; 122
    187e:	55 e4       	ldi	r21, 0x45	; 69
    1880:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8f 83       	std	Y+7, r24	; 0x07
    188a:	98 87       	std	Y+8, r25	; 0x08
    188c:	a9 87       	std	Y+9, r26	; 0x09
    188e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_init+0x7a>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_init+0xf8>
	else if (__tmp > 65535)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    18cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9e 83       	std	Y+6, r25	; 0x06
    18f0:	8d 83       	std	Y+5, r24	; 0x05
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_init+0xda>
    18f4:	80 e9       	ldi	r24, 0x90	; 144
    18f6:	91 e0       	ldi	r25, 0x01	; 1
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_init+0xc8>
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	9e 81       	ldd	r25, Y+6	; 0x06
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_init+0xbc>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6f 81       	ldd	r22, Y+7	; 0x07
    191e:	78 85       	ldd	r23, Y+8	; 0x08
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	8d 83       	std	Y+5, r24	; 0x05
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	9e 81       	ldd	r25, Y+6	; 0x06
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_init+0x104>
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	63 e0       	ldi	r22, 0x03	; 3
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	64 e0       	ldi	r22, 0x04	; 4
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	65 e0       	ldi	r22, 0x05	; 5
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	66 e0       	ldi	r22, 0x06	; 6
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 4a 07 	call	0xe94	; 0xe94 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    196c:	83 e3       	ldi	r24, 0x33	; 51
    196e:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1972:	82 e3       	ldi	r24, 0x32	; 50
    1974:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1978:	88 e2       	ldi	r24, 0x28	; 40
    197a:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    197e:	8c e0       	ldi	r24, 0x0C	; 12
    1980:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
}
    198a:	2e 96       	adiw	r28, 0x0e	; 14
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	f8 94       	cli
    1990:	de bf       	out	0x3e, r29	; 62
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	cd bf       	out	0x3d, r28	; 61
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	c3 56       	subi	r28, 0x63	; 99
    19aa:	d0 40       	sbci	r29, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	fe 01       	movw	r30, r28
    19b8:	ed 59       	subi	r30, 0x9D	; 157
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    19c8:	fe 01       	movw	r30, r28
    19ca:	e1 5a       	subi	r30, 0xA1	; 161
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a0 e8       	ldi	r26, 0x80	; 128
    19d4:	bf e3       	ldi	r27, 0x3F	; 63
    19d6:	80 83       	st	Z, r24
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	a2 83       	std	Z+2, r26	; 0x02
    19dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19de:	8e 01       	movw	r16, r28
    19e0:	05 5a       	subi	r16, 0xA5	; 165
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	e1 5a       	subi	r30, 0xA1	; 161
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a e7       	ldi	r20, 0x7A	; 122
    19f8:	55 e4       	ldi	r21, 0x45	; 69
    19fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	80 83       	st	Z, r24
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	a2 83       	std	Z+2, r26	; 0x02
    1a0a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	e5 5a       	subi	r30, 0xA5	; 165
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	44 f4       	brge	.+16     	; 0x1a3a <LCD_sendCommand+0x9e>
		__ticks = 1;
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e7 5a       	subi	r30, 0xA7	; 167
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
    1a38:	64 c0       	rjmp	.+200    	; 0x1b02 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e5 5a       	subi	r30, 0xA5	; 165
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	0c f0       	brlt	.+2      	; 0x1a5a <LCD_sendCommand+0xbe>
    1a58:	43 c0       	rjmp	.+134    	; 0x1ae0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e1 5a       	subi	r30, 0xA1	; 161
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8e 01       	movw	r16, r28
    1a7a:	07 5a       	subi	r16, 0xA7	; 167
    1a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	91 83       	std	Z+1, r25	; 0x01
    1a8e:	80 83       	st	Z, r24
    1a90:	1f c0       	rjmp	.+62     	; 0x1ad0 <LCD_sendCommand+0x134>
    1a92:	fe 01       	movw	r30, r28
    1a94:	e9 5a       	subi	r30, 0xA9	; 169
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 e9       	ldi	r24, 0x90	; 144
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	91 83       	std	Z+1, r25	; 0x01
    1a9e:	80 83       	st	Z, r24
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e9 5a       	subi	r30, 0xA9	; 169
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_sendCommand+0x10e>
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e9 5a       	subi	r30, 0xA9	; 169
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab8:	de 01       	movw	r26, r28
    1aba:	a7 5a       	subi	r26, 0xA7	; 167
    1abc:	bf 4f       	sbci	r27, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e7 5a       	subi	r30, 0xA7	; 167
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	9c 93       	st	X, r25
    1ace:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e7 5a       	subi	r30, 0xA7	; 167
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 81       	ld	r24, Z
    1ad8:	91 81       	ldd	r25, Z+1	; 0x01
    1ada:	00 97       	sbiw	r24, 0x00	; 0
    1adc:	d1 f6       	brne	.-76     	; 0x1a92 <LCD_sendCommand+0xf6>
    1ade:	27 c0       	rjmp	.+78     	; 0x1b2e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae0:	8e 01       	movw	r16, r28
    1ae2:	07 5a       	subi	r16, 0xA7	; 167
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	e5 5a       	subi	r30, 0xA5	; 165
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	de 01       	movw	r26, r28
    1b04:	ab 5a       	subi	r26, 0xAB	; 171
    1b06:	bf 4f       	sbci	r27, 0xFF	; 255
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e7 5a       	subi	r30, 0xA7	; 167
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	8d 93       	st	X+, r24
    1b14:	9c 93       	st	X, r25
    1b16:	fe 01       	movw	r30, r28
    1b18:	eb 5a       	subi	r30, 0xAB	; 171
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_sendCommand+0x184>
    1b24:	fe 01       	movw	r30, r28
    1b26:	eb 5a       	subi	r30, 0xAB	; 171
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ef 5a       	subi	r30, 0xAF	; 175
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e8       	ldi	r26, 0x80	; 128
    1b44:	bf e3       	ldi	r27, 0x3F	; 63
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	8e 01       	movw	r16, r28
    1b50:	03 5b       	subi	r16, 0xB3	; 179
    1b52:	1f 4f       	sbci	r17, 0xFF	; 255
    1b54:	fe 01       	movw	r30, r28
    1b56:	ef 5a       	subi	r30, 0xAF	; 175
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	4a e7       	ldi	r20, 0x7A	; 122
    1b68:	55 e4       	ldi	r21, 0x45	; 69
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	f8 01       	movw	r30, r16
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	a2 83       	std	Z+2, r26	; 0x02
    1b7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e3 5b       	subi	r30, 0xB3	; 179
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	44 f4       	brge	.+16     	; 0x1baa <LCD_sendCommand+0x20e>
		__ticks = 1;
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 5b       	subi	r30, 0xB5	; 181
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	80 83       	st	Z, r24
    1ba8:	64 c0       	rjmp	.+200    	; 0x1c72 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1baa:	fe 01       	movw	r30, r28
    1bac:	e3 5b       	subi	r30, 0xB3	; 179
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	0c f0       	brlt	.+2      	; 0x1bca <LCD_sendCommand+0x22e>
    1bc8:	43 c0       	rjmp	.+134    	; 0x1c50 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ef 5a       	subi	r30, 0xAF	; 175
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e2       	ldi	r20, 0x20	; 32
    1bde:	51 e4       	ldi	r21, 0x41	; 65
    1be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8e 01       	movw	r16, r28
    1bea:	05 5b       	subi	r16, 0xB5	; 181
    1bec:	1f 4f       	sbci	r17, 0xFF	; 255
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
    1c00:	1f c0       	rjmp	.+62     	; 0x1c40 <LCD_sendCommand+0x2a4>
    1c02:	fe 01       	movw	r30, r28
    1c04:	e7 5b       	subi	r30, 0xB7	; 183
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 e9       	ldi	r24, 0x90	; 144
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	fe 01       	movw	r30, r28
    1c12:	e7 5b       	subi	r30, 0xB7	; 183
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_sendCommand+0x27e>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	e7 5b       	subi	r30, 0xB7	; 183
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	de 01       	movw	r26, r28
    1c2a:	a5 5b       	subi	r26, 0xB5	; 181
    1c2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e5 5b       	subi	r30, 0xB5	; 181
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	9c 93       	st	X, r25
    1c3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e5 5b       	subi	r30, 0xB5	; 181
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	d1 f6       	brne	.-76     	; 0x1c02 <LCD_sendCommand+0x266>
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	8e 01       	movw	r16, r28
    1c52:	05 5b       	subi	r16, 0xB5	; 181
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	fe 01       	movw	r30, r28
    1c58:	e3 5b       	subi	r30, 0xB3	; 179
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
    1c72:	de 01       	movw	r26, r28
    1c74:	a9 5b       	subi	r26, 0xB9	; 185
    1c76:	bf 4f       	sbci	r27, 0xFF	; 255
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5b       	subi	r30, 0xB5	; 181
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	8d 93       	st	X+, r24
    1c84:	9c 93       	st	X, r25
    1c86:	fe 01       	movw	r30, r28
    1c88:	e9 5b       	subi	r30, 0xB9	; 185
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_sendCommand+0x2f4>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e9 5b       	subi	r30, 0xB9	; 185
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ed 59       	subi	r30, 0x9D	; 157
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 2f       	mov	r24, r24
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	80 71       	andi	r24, 0x10	; 16
    1cac:	90 70       	andi	r25, 0x00	; 0
    1cae:	95 95       	asr	r25
    1cb0:	87 95       	ror	r24
    1cb2:	95 95       	asr	r25
    1cb4:	87 95       	ror	r24
    1cb6:	95 95       	asr	r25
    1cb8:	87 95       	ror	r24
    1cba:	95 95       	asr	r25
    1cbc:	87 95       	ror	r24
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	49 2f       	mov	r20, r25
    1cc6:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ed 59       	subi	r30, 0x9D	; 157
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	80 81       	ld	r24, Z
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	80 72       	andi	r24, 0x20	; 32
    1cd8:	90 70       	andi	r25, 0x00	; 0
    1cda:	95 95       	asr	r25
    1cdc:	87 95       	ror	r24
    1cde:	95 95       	asr	r25
    1ce0:	87 95       	ror	r24
    1ce2:	95 95       	asr	r25
    1ce4:	87 95       	ror	r24
    1ce6:	95 95       	asr	r25
    1ce8:	87 95       	ror	r24
    1cea:	95 95       	asr	r25
    1cec:	87 95       	ror	r24
    1cee:	98 2f       	mov	r25, r24
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	49 2f       	mov	r20, r25
    1cf6:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ed 59       	subi	r30, 0x9D	; 157
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	80 74       	andi	r24, 0x40	; 64
    1d08:	90 70       	andi	r25, 0x00	; 0
    1d0a:	08 2e       	mov	r0, r24
    1d0c:	89 2f       	mov	r24, r25
    1d0e:	00 0c       	add	r0, r0
    1d10:	88 1f       	adc	r24, r24
    1d12:	99 0b       	sbc	r25, r25
    1d14:	00 0c       	add	r0, r0
    1d16:	88 1f       	adc	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	98 2f       	mov	r25, r24
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	65 e0       	ldi	r22, 0x05	; 5
    1d20:	49 2f       	mov	r20, r25
    1d22:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1d26:	fe 01       	movw	r30, r28
    1d28:	ed 59       	subi	r30, 0x9D	; 157
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	98 2f       	mov	r25, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	99 27       	eor	r25, r25
    1d34:	99 1f       	adc	r25, r25
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	66 e0       	ldi	r22, 0x06	; 6
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    1d40:	fe 01       	movw	r30, r28
    1d42:	ed 5b       	subi	r30, 0xBD	; 189
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e8       	ldi	r26, 0x80	; 128
    1d4c:	bf e3       	ldi	r27, 0x3F	; 63
    1d4e:	80 83       	st	Z, r24
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	a2 83       	std	Z+2, r26	; 0x02
    1d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d56:	8e 01       	movw	r16, r28
    1d58:	01 5c       	subi	r16, 0xC1	; 193
    1d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ed 5b       	subi	r30, 0xBD	; 189
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	4a e7       	ldi	r20, 0x7A	; 122
    1d70:	55 e4       	ldi	r21, 0x45	; 69
    1d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	f8 01       	movw	r30, r16
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d84:	fe 01       	movw	r30, r28
    1d86:	ff 96       	adiw	r30, 0x3f	; 63
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <LCD_sendCommand+0x40e>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e af       	std	Y+62, r25	; 0x3e
    1da6:	8d af       	std	Y+61, r24	; 0x3d
    1da8:	46 c0       	rjmp	.+140    	; 0x1e36 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1daa:	fe 01       	movw	r30, r28
    1dac:	ff 96       	adiw	r30, 0x3f	; 63
    1dae:	60 81       	ld	r22, Z
    1db0:	71 81       	ldd	r23, Z+1	; 0x01
    1db2:	82 81       	ldd	r24, Z+2	; 0x02
    1db4:	93 81       	ldd	r25, Z+3	; 0x03
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	64 f5       	brge	.+88     	; 0x1e1e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ed 5b       	subi	r30, 0xBD	; 189
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9e af       	std	Y+62, r25	; 0x3e
    1df2:	8d af       	std	Y+61, r24	; 0x3d
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_sendCommand+0x478>
    1df6:	80 e9       	ldi	r24, 0x90	; 144
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	9c af       	std	Y+60, r25	; 0x3c
    1dfc:	8b af       	std	Y+59, r24	; 0x3b
    1dfe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e00:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_sendCommand+0x466>
    1e06:	9c af       	std	Y+60, r25	; 0x3c
    1e08:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9e af       	std	Y+62, r25	; 0x3e
    1e12:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_sendCommand+0x45a>
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ff 96       	adiw	r30, 0x3f	; 63
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9e af       	std	Y+62, r25	; 0x3e
    1e34:	8d af       	std	Y+61, r24	; 0x3d
    1e36:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e38:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3a:	9a af       	std	Y+58, r25	; 0x3a
    1e3c:	89 af       	std	Y+57, r24	; 0x39
    1e3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e40:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_sendCommand+0x4a6>
    1e46:	9a af       	std	Y+58, r25	; 0x3a
    1e48:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	62 e0       	ldi	r22, 0x02	; 2
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e8       	ldi	r26, 0x80	; 128
    1e5a:	bf e3       	ldi	r27, 0x3F	; 63
    1e5c:	8d ab       	std	Y+53, r24	; 0x35
    1e5e:	9e ab       	std	Y+54, r25	; 0x36
    1e60:	af ab       	std	Y+55, r26	; 0x37
    1e62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	6d a9       	ldd	r22, Y+53	; 0x35
    1e66:	7e a9       	ldd	r23, Y+54	; 0x36
    1e68:	8f a9       	ldd	r24, Y+55	; 0x37
    1e6a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a e7       	ldi	r20, 0x7A	; 122
    1e72:	55 e4       	ldi	r21, 0x45	; 69
    1e74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	89 ab       	std	Y+49, r24	; 0x31
    1e7e:	9a ab       	std	Y+50, r25	; 0x32
    1e80:	ab ab       	std	Y+51, r26	; 0x33
    1e82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e84:	69 a9       	ldd	r22, Y+49	; 0x31
    1e86:	7a a9       	ldd	r23, Y+50	; 0x32
    1e88:	8b a9       	ldd	r24, Y+51	; 0x33
    1e8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
    1ea4:	3f c0       	rjmp	.+126    	; 0x1f24 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1ea6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea8:	7a a9       	ldd	r23, Y+50	; 0x32
    1eaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1eac:	9c a9       	ldd	r25, Y+52	; 0x34
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	4f e7       	ldi	r20, 0x7F	; 127
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	4c f5       	brge	.+82     	; 0x1f10 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	6d a9       	ldd	r22, Y+53	; 0x35
    1ec0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ec2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	98 ab       	std	Y+48, r25	; 0x30
    1ee4:	8f a7       	std	Y+47, r24	; 0x2f
    1ee6:	0f c0       	rjmp	.+30     	; 0x1f06 <LCD_sendCommand+0x56a>
    1ee8:	80 e9       	ldi	r24, 0x90	; 144
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	9e a7       	std	Y+46, r25	; 0x2e
    1eee:	8d a7       	std	Y+45, r24	; 0x2d
    1ef0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ef2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_sendCommand+0x558>
    1ef8:	9e a7       	std	Y+46, r25	; 0x2e
    1efa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efe:	98 a9       	ldd	r25, Y+48	; 0x30
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	98 ab       	std	Y+48, r25	; 0x30
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f08:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <LCD_sendCommand+0x54c>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	69 a9       	ldd	r22, Y+49	; 0x31
    1f12:	7a a9       	ldd	r23, Y+50	; 0x32
    1f14:	8b a9       	ldd	r24, Y+51	; 0x33
    1f16:	9c a9       	ldd	r25, Y+52	; 0x34
    1f18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	98 ab       	std	Y+48, r25	; 0x30
    1f22:	8f a7       	std	Y+47, r24	; 0x2f
    1f24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f26:	98 a9       	ldd	r25, Y+48	; 0x30
    1f28:	9c a7       	std	Y+44, r25	; 0x2c
    1f2a:	8b a7       	std	Y+43, r24	; 0x2b
    1f2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_sendCommand+0x594>
    1f34:	9c a7       	std	Y+44, r25	; 0x2c
    1f36:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	62 e0       	ldi	r22, 0x02	; 2
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	a0 e8       	ldi	r26, 0x80	; 128
    1f48:	bf e3       	ldi	r27, 0x3F	; 63
    1f4a:	8f a3       	std	Y+39, r24	; 0x27
    1f4c:	98 a7       	std	Y+40, r25	; 0x28
    1f4e:	a9 a7       	std	Y+41, r26	; 0x29
    1f50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f52:	6f a1       	ldd	r22, Y+39	; 0x27
    1f54:	78 a5       	ldd	r23, Y+40	; 0x28
    1f56:	89 a5       	ldd	r24, Y+41	; 0x29
    1f58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	4a e7       	ldi	r20, 0x7A	; 122
    1f60:	55 e4       	ldi	r21, 0x45	; 69
    1f62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8b a3       	std	Y+35, r24	; 0x23
    1f6c:	9c a3       	std	Y+36, r25	; 0x24
    1f6e:	ad a3       	std	Y+37, r26	; 0x25
    1f70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f72:	6b a1       	ldd	r22, Y+35	; 0x23
    1f74:	7c a1       	ldd	r23, Y+36	; 0x24
    1f76:	8d a1       	ldd	r24, Y+37	; 0x25
    1f78:	9e a1       	ldd	r25, Y+38	; 0x26
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	2c f4       	brge	.+10     	; 0x1f94 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
    1f92:	3f c0       	rjmp	.+126    	; 0x2012 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1f94:	6b a1       	ldd	r22, Y+35	; 0x23
    1f96:	7c a1       	ldd	r23, Y+36	; 0x24
    1f98:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	4c f5       	brge	.+82     	; 0x1ffe <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fac:	6f a1       	ldd	r22, Y+39	; 0x27
    1fae:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e2       	ldi	r20, 0x20	; 32
    1fba:	51 e4       	ldi	r21, 0x41	; 65
    1fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9a a3       	std	Y+34, r25	; 0x22
    1fd2:	89 a3       	std	Y+33, r24	; 0x21
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <LCD_sendCommand+0x658>
    1fd6:	80 e9       	ldi	r24, 0x90	; 144
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	98 a3       	std	Y+32, r25	; 0x20
    1fdc:	8f 8f       	std	Y+31, r24	; 0x1f
    1fde:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fe0:	98 a1       	ldd	r25, Y+32	; 0x20
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_sendCommand+0x646>
    1fe6:	98 a3       	std	Y+32, r25	; 0x20
    1fe8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	89 a1       	ldd	r24, Y+33	; 0x21
    1fec:	9a a1       	ldd	r25, Y+34	; 0x22
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	9a a3       	std	Y+34, r25	; 0x22
    1ff2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	69 f7       	brne	.-38     	; 0x1fd6 <LCD_sendCommand+0x63a>
    1ffc:	14 c0       	rjmp	.+40     	; 0x2026 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffe:	6b a1       	ldd	r22, Y+35	; 0x23
    2000:	7c a1       	ldd	r23, Y+36	; 0x24
    2002:	8d a1       	ldd	r24, Y+37	; 0x25
    2004:	9e a1       	ldd	r25, Y+38	; 0x26
    2006:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	9a a3       	std	Y+34, r25	; 0x22
    2010:	89 a3       	std	Y+33, r24	; 0x21
    2012:	89 a1       	ldd	r24, Y+33	; 0x21
    2014:	9a a1       	ldd	r25, Y+34	; 0x22
    2016:	9e 8f       	std	Y+30, r25	; 0x1e
    2018:	8d 8f       	std	Y+29, r24	; 0x1d
    201a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    201c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_sendCommand+0x682>
    2022:	9e 8f       	std	Y+30, r25	; 0x1e
    2024:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2026:	fe 01       	movw	r30, r28
    2028:	ed 59       	subi	r30, 0x9D	; 157
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	98 2f       	mov	r25, r24
    2030:	91 70       	andi	r25, 0x01	; 1
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	49 2f       	mov	r20, r25
    2038:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    203c:	fe 01       	movw	r30, r28
    203e:	ed 59       	subi	r30, 0x9D	; 157
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	82 70       	andi	r24, 0x02	; 2
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	95 95       	asr	r25
    204e:	87 95       	ror	r24
    2050:	98 2f       	mov	r25, r24
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	64 e0       	ldi	r22, 0x04	; 4
    2056:	49 2f       	mov	r20, r25
    2058:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    205c:	fe 01       	movw	r30, r28
    205e:	ed 59       	subi	r30, 0x9D	; 157
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	84 70       	andi	r24, 0x04	; 4
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	95 95       	asr	r25
    206e:	87 95       	ror	r24
    2070:	95 95       	asr	r25
    2072:	87 95       	ror	r24
    2074:	98 2f       	mov	r25, r24
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	65 e0       	ldi	r22, 0x05	; 5
    207a:	49 2f       	mov	r20, r25
    207c:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2080:	fe 01       	movw	r30, r28
    2082:	ed 59       	subi	r30, 0x9D	; 157
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	88 70       	andi	r24, 0x08	; 8
    208e:	90 70       	andi	r25, 0x00	; 0
    2090:	95 95       	asr	r25
    2092:	87 95       	ror	r24
    2094:	95 95       	asr	r25
    2096:	87 95       	ror	r24
    2098:	95 95       	asr	r25
    209a:	87 95       	ror	r24
    209c:	98 2f       	mov	r25, r24
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	66 e0       	ldi	r22, 0x06	; 6
    20a2:	49 2f       	mov	r20, r25
    20a4:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e8       	ldi	r26, 0x80	; 128
    20ae:	bf e3       	ldi	r27, 0x3F	; 63
    20b0:	89 8f       	std	Y+25, r24	; 0x19
    20b2:	9a 8f       	std	Y+26, r25	; 0x1a
    20b4:	ab 8f       	std	Y+27, r26	; 0x1b
    20b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a e7       	ldi	r20, 0x7A	; 122
    20c6:	55 e4       	ldi	r21, 0x45	; 69
    20c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8d 8b       	std	Y+21, r24	; 0x15
    20d2:	9e 8b       	std	Y+22, r25	; 0x16
    20d4:	af 8b       	std	Y+23, r26	; 0x17
    20d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d8:	6d 89       	ldd	r22, Y+21	; 0x15
    20da:	7e 89       	ldd	r23, Y+22	; 0x16
    20dc:	8f 89       	ldd	r24, Y+23	; 0x17
    20de:	98 8d       	ldd	r25, Y+24	; 0x18
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	2c f4       	brge	.+10     	; 0x20fa <LCD_sendCommand+0x75e>
		__ticks = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9c 8b       	std	Y+20, r25	; 0x14
    20f6:	8b 8b       	std	Y+19, r24	; 0x13
    20f8:	3f c0       	rjmp	.+126    	; 0x2178 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    20fa:	6d 89       	ldd	r22, Y+21	; 0x15
    20fc:	7e 89       	ldd	r23, Y+22	; 0x16
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	98 8d       	ldd	r25, Y+24	; 0x18
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	3f ef       	ldi	r19, 0xFF	; 255
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	57 e4       	ldi	r21, 0x47	; 71
    210a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	4c f5       	brge	.+82     	; 0x2164 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2112:	69 8d       	ldd	r22, Y+25	; 0x19
    2114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	0f c0       	rjmp	.+30     	; 0x215a <LCD_sendCommand+0x7be>
    213c:	80 e9       	ldi	r24, 0x90	; 144
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	9a 89       	ldd	r25, Y+18	; 0x12
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_sendCommand+0x7ac>
    214c:	9a 8b       	std	Y+18, r25	; 0x12
    214e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	9c 89       	ldd	r25, Y+20	; 0x14
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	9c 8b       	std	Y+20, r25	; 0x14
    2158:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	69 f7       	brne	.-38     	; 0x213c <LCD_sendCommand+0x7a0>
    2162:	14 c0       	rjmp	.+40     	; 0x218c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9c 8b       	std	Y+20, r25	; 0x14
    2176:	8b 8b       	std	Y+19, r24	; 0x13
    2178:	8b 89       	ldd	r24, Y+19	; 0x13
    217a:	9c 89       	ldd	r25, Y+20	; 0x14
    217c:	98 8b       	std	Y+16, r25	; 0x10
    217e:	8f 87       	std	Y+15, r24	; 0x0f
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	98 89       	ldd	r25, Y+16	; 0x10
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <LCD_sendCommand+0x7e8>
    2188:	98 8b       	std	Y+16, r25	; 0x10
    218a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	62 e0       	ldi	r22, 0x02	; 2
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e8       	ldi	r26, 0x80	; 128
    219c:	bf e3       	ldi	r27, 0x3F	; 63
    219e:	8b 87       	std	Y+11, r24	; 0x0b
    21a0:	9c 87       	std	Y+12, r25	; 0x0c
    21a2:	ad 87       	std	Y+13, r26	; 0x0d
    21a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a e7       	ldi	r20, 0x7A	; 122
    21b4:	55 e4       	ldi	r21, 0x45	; 69
    21b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8f 83       	std	Y+7, r24	; 0x07
    21c0:	98 87       	std	Y+8, r25	; 0x08
    21c2:	a9 87       	std	Y+9, r26	; 0x09
    21c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	57 e4       	ldi	r21, 0x47	; 71
    21f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	6b 85       	ldd	r22, Y+11	; 0x0b
    2202:	7c 85       	ldd	r23, Y+12	; 0x0c
    2204:	8d 85       	ldd	r24, Y+13	; 0x0d
    2206:	9e 85       	ldd	r25, Y+14	; 0x0e
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <LCD_sendCommand+0x8ac>
    222a:	80 e9       	ldi	r24, 0x90	; 144
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	9c 83       	std	Y+4, r25	; 0x04
    2230:	8b 83       	std	Y+3, r24	; 0x03
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_sendCommand+0x89a>
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	69 f7       	brne	.-38     	; 0x222a <LCD_sendCommand+0x88e>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_sendCommand+0x8d6>
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    227a:	cd 59       	subi	r28, 0x9D	; 157
    227c:	df 4f       	sbci	r29, 0xFF	; 255
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	08 95       	ret

00002292 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	c3 56       	subi	r28, 0x63	; 99
    22a0:	d0 40       	sbci	r29, 0x00	; 0
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 59       	subi	r30, 0x9D	; 157
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    22be:	fe 01       	movw	r30, r28
    22c0:	e1 5a       	subi	r30, 0xA1	; 161
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 e8       	ldi	r26, 0x80	; 128
    22ca:	bf e3       	ldi	r27, 0x3F	; 63
    22cc:	80 83       	st	Z, r24
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	a2 83       	std	Z+2, r26	; 0x02
    22d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	8e 01       	movw	r16, r28
    22d6:	05 5a       	subi	r16, 0xA5	; 165
    22d8:	1f 4f       	sbci	r17, 0xFF	; 255
    22da:	fe 01       	movw	r30, r28
    22dc:	e1 5a       	subi	r30, 0xA1	; 161
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	60 81       	ld	r22, Z
    22e2:	71 81       	ldd	r23, Z+1	; 0x01
    22e4:	82 81       	ldd	r24, Z+2	; 0x02
    22e6:	93 81       	ldd	r25, Z+3	; 0x03
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4a e7       	ldi	r20, 0x7A	; 122
    22ee:	55 e4       	ldi	r21, 0x45	; 69
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	f8 01       	movw	r30, r16
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2302:	fe 01       	movw	r30, r28
    2304:	e5 5a       	subi	r30, 0xA5	; 165
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	44 f4       	brge	.+16     	; 0x2330 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2320:	fe 01       	movw	r30, r28
    2322:	e7 5a       	subi	r30, 0xA7	; 167
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
    232e:	64 c0       	rjmp	.+200    	; 0x23f8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2330:	fe 01       	movw	r30, r28
    2332:	e5 5a       	subi	r30, 0xA5	; 165
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	0c f0       	brlt	.+2      	; 0x2350 <LCD_displayCharacter+0xbe>
    234e:	43 c0       	rjmp	.+134    	; 0x23d6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	fe 01       	movw	r30, r28
    2352:	e1 5a       	subi	r30, 0xA1	; 161
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e2       	ldi	r20, 0x20	; 32
    2364:	51 e4       	ldi	r21, 0x41	; 65
    2366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8e 01       	movw	r16, r28
    2370:	07 5a       	subi	r16, 0xA7	; 167
    2372:	1f 4f       	sbci	r17, 0xFF	; 255
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	f8 01       	movw	r30, r16
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	80 83       	st	Z, r24
    2386:	1f c0       	rjmp	.+62     	; 0x23c6 <LCD_displayCharacter+0x134>
    2388:	fe 01       	movw	r30, r28
    238a:	e9 5a       	subi	r30, 0xA9	; 169
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 e9       	ldi	r24, 0x90	; 144
    2390:	91 e0       	ldi	r25, 0x01	; 1
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
    2396:	fe 01       	movw	r30, r28
    2398:	e9 5a       	subi	r30, 0xA9	; 169
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	80 81       	ld	r24, Z
    239e:	91 81       	ldd	r25, Z+1	; 0x01
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_displayCharacter+0x10e>
    23a4:	fe 01       	movw	r30, r28
    23a6:	e9 5a       	subi	r30, 0xA9	; 169
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	de 01       	movw	r26, r28
    23b0:	a7 5a       	subi	r26, 0xA7	; 167
    23b2:	bf 4f       	sbci	r27, 0xFF	; 255
    23b4:	fe 01       	movw	r30, r28
    23b6:	e7 5a       	subi	r30, 0xA7	; 167
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	11 96       	adiw	r26, 0x01	; 1
    23c2:	9c 93       	st	X, r25
    23c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c6:	fe 01       	movw	r30, r28
    23c8:	e7 5a       	subi	r30, 0xA7	; 167
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	d1 f6       	brne	.-76     	; 0x2388 <LCD_displayCharacter+0xf6>
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d6:	8e 01       	movw	r16, r28
    23d8:	07 5a       	subi	r16, 0xA7	; 167
    23da:	1f 4f       	sbci	r17, 0xFF	; 255
    23dc:	fe 01       	movw	r30, r28
    23de:	e5 5a       	subi	r30, 0xA5	; 165
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	82 81       	ldd	r24, Z+2	; 0x02
    23e8:	93 81       	ldd	r25, Z+3	; 0x03
    23ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	f8 01       	movw	r30, r16
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
    23f8:	de 01       	movw	r26, r28
    23fa:	ab 5a       	subi	r26, 0xAB	; 171
    23fc:	bf 4f       	sbci	r27, 0xFF	; 255
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 5a       	subi	r30, 0xA7	; 167
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	8d 93       	st	X+, r24
    240a:	9c 93       	st	X, r25
    240c:	fe 01       	movw	r30, r28
    240e:	eb 5a       	subi	r30, 0xAB	; 171
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	80 81       	ld	r24, Z
    2414:	91 81       	ldd	r25, Z+1	; 0x01
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_displayCharacter+0x184>
    241a:	fe 01       	movw	r30, r28
    241c:	eb 5a       	subi	r30, 0xAB	; 171
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	41 e0       	ldi	r20, 0x01	; 1
    242a:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    242e:	fe 01       	movw	r30, r28
    2430:	ef 5a       	subi	r30, 0xAF	; 175
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a0 e8       	ldi	r26, 0x80	; 128
    243a:	bf e3       	ldi	r27, 0x3F	; 63
    243c:	80 83       	st	Z, r24
    243e:	91 83       	std	Z+1, r25	; 0x01
    2440:	a2 83       	std	Z+2, r26	; 0x02
    2442:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2444:	8e 01       	movw	r16, r28
    2446:	03 5b       	subi	r16, 0xB3	; 179
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	fe 01       	movw	r30, r28
    244c:	ef 5a       	subi	r30, 0xAF	; 175
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	60 81       	ld	r22, Z
    2452:	71 81       	ldd	r23, Z+1	; 0x01
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4a e7       	ldi	r20, 0x7A	; 122
    245e:	55 e4       	ldi	r21, 0x45	; 69
    2460:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	f8 01       	movw	r30, r16
    246a:	80 83       	st	Z, r24
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	a2 83       	std	Z+2, r26	; 0x02
    2470:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2472:	fe 01       	movw	r30, r28
    2474:	e3 5b       	subi	r30, 0xB3	; 179
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	60 81       	ld	r22, Z
    247a:	71 81       	ldd	r23, Z+1	; 0x01
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	93 81       	ldd	r25, Z+3	; 0x03
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	44 f4       	brge	.+16     	; 0x24a0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2490:	fe 01       	movw	r30, r28
    2492:	e5 5b       	subi	r30, 0xB5	; 181
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	80 83       	st	Z, r24
    249e:	64 c0       	rjmp	.+200    	; 0x2568 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24a0:	fe 01       	movw	r30, r28
    24a2:	e3 5b       	subi	r30, 0xB3	; 179
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	0c f0       	brlt	.+2      	; 0x24c0 <LCD_displayCharacter+0x22e>
    24be:	43 c0       	rjmp	.+134    	; 0x2546 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	fe 01       	movw	r30, r28
    24c2:	ef 5a       	subi	r30, 0xAF	; 175
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e2       	ldi	r20, 0x20	; 32
    24d4:	51 e4       	ldi	r21, 0x41	; 65
    24d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8e 01       	movw	r16, r28
    24e0:	05 5b       	subi	r16, 0xB5	; 181
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	f8 01       	movw	r30, r16
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	80 83       	st	Z, r24
    24f6:	1f c0       	rjmp	.+62     	; 0x2536 <LCD_displayCharacter+0x2a4>
    24f8:	fe 01       	movw	r30, r28
    24fa:	e7 5b       	subi	r30, 0xB7	; 183
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 e9       	ldi	r24, 0x90	; 144
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	fe 01       	movw	r30, r28
    2508:	e7 5b       	subi	r30, 0xB7	; 183
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_displayCharacter+0x27e>
    2514:	fe 01       	movw	r30, r28
    2516:	e7 5b       	subi	r30, 0xB7	; 183
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251e:	de 01       	movw	r26, r28
    2520:	a5 5b       	subi	r26, 0xB5	; 181
    2522:	bf 4f       	sbci	r27, 0xFF	; 255
    2524:	fe 01       	movw	r30, r28
    2526:	e5 5b       	subi	r30, 0xB5	; 181
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	11 96       	adiw	r26, 0x01	; 1
    2532:	9c 93       	st	X, r25
    2534:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	fe 01       	movw	r30, r28
    2538:	e5 5b       	subi	r30, 0xB5	; 181
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	d1 f6       	brne	.-76     	; 0x24f8 <LCD_displayCharacter+0x266>
    2544:	27 c0       	rjmp	.+78     	; 0x2594 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2546:	8e 01       	movw	r16, r28
    2548:	05 5b       	subi	r16, 0xB5	; 181
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	fe 01       	movw	r30, r28
    254e:	e3 5b       	subi	r30, 0xB3	; 179
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	60 81       	ld	r22, Z
    2554:	71 81       	ldd	r23, Z+1	; 0x01
    2556:	82 81       	ldd	r24, Z+2	; 0x02
    2558:	93 81       	ldd	r25, Z+3	; 0x03
    255a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	f8 01       	movw	r30, r16
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    2568:	de 01       	movw	r26, r28
    256a:	a9 5b       	subi	r26, 0xB9	; 185
    256c:	bf 4f       	sbci	r27, 0xFF	; 255
    256e:	fe 01       	movw	r30, r28
    2570:	e5 5b       	subi	r30, 0xB5	; 181
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	8d 93       	st	X+, r24
    257a:	9c 93       	st	X, r25
    257c:	fe 01       	movw	r30, r28
    257e:	e9 5b       	subi	r30, 0xB9	; 185
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	91 81       	ldd	r25, Z+1	; 0x01
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_displayCharacter+0x2f4>
    258a:	fe 01       	movw	r30, r28
    258c:	e9 5b       	subi	r30, 0xB9	; 185
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2594:	fe 01       	movw	r30, r28
    2596:	ed 59       	subi	r30, 0x9D	; 157
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	80 71       	andi	r24, 0x10	; 16
    25a2:	90 70       	andi	r25, 0x00	; 0
    25a4:	95 95       	asr	r25
    25a6:	87 95       	ror	r24
    25a8:	95 95       	asr	r25
    25aa:	87 95       	ror	r24
    25ac:	95 95       	asr	r25
    25ae:	87 95       	ror	r24
    25b0:	95 95       	asr	r25
    25b2:	87 95       	ror	r24
    25b4:	98 2f       	mov	r25, r24
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	63 e0       	ldi	r22, 0x03	; 3
    25ba:	49 2f       	mov	r20, r25
    25bc:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    25c0:	fe 01       	movw	r30, r28
    25c2:	ed 59       	subi	r30, 0x9D	; 157
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	88 2f       	mov	r24, r24
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	80 72       	andi	r24, 0x20	; 32
    25ce:	90 70       	andi	r25, 0x00	; 0
    25d0:	95 95       	asr	r25
    25d2:	87 95       	ror	r24
    25d4:	95 95       	asr	r25
    25d6:	87 95       	ror	r24
    25d8:	95 95       	asr	r25
    25da:	87 95       	ror	r24
    25dc:	95 95       	asr	r25
    25de:	87 95       	ror	r24
    25e0:	95 95       	asr	r25
    25e2:	87 95       	ror	r24
    25e4:	98 2f       	mov	r25, r24
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	64 e0       	ldi	r22, 0x04	; 4
    25ea:	49 2f       	mov	r20, r25
    25ec:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    25f0:	fe 01       	movw	r30, r28
    25f2:	ed 59       	subi	r30, 0x9D	; 157
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	80 74       	andi	r24, 0x40	; 64
    25fe:	90 70       	andi	r25, 0x00	; 0
    2600:	08 2e       	mov	r0, r24
    2602:	89 2f       	mov	r24, r25
    2604:	00 0c       	add	r0, r0
    2606:	88 1f       	adc	r24, r24
    2608:	99 0b       	sbc	r25, r25
    260a:	00 0c       	add	r0, r0
    260c:	88 1f       	adc	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	98 2f       	mov	r25, r24
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	65 e0       	ldi	r22, 0x05	; 5
    2616:	49 2f       	mov	r20, r25
    2618:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    261c:	fe 01       	movw	r30, r28
    261e:	ed 59       	subi	r30, 0x9D	; 157
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	98 2f       	mov	r25, r24
    2626:	99 1f       	adc	r25, r25
    2628:	99 27       	eor	r25, r25
    262a:	99 1f       	adc	r25, r25
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	66 e0       	ldi	r22, 0x06	; 6
    2630:	49 2f       	mov	r20, r25
    2632:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    2636:	fe 01       	movw	r30, r28
    2638:	ed 5b       	subi	r30, 0xBD	; 189
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e8       	ldi	r26, 0x80	; 128
    2642:	bf e3       	ldi	r27, 0x3F	; 63
    2644:	80 83       	st	Z, r24
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	a2 83       	std	Z+2, r26	; 0x02
    264a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	8e 01       	movw	r16, r28
    264e:	01 5c       	subi	r16, 0xC1	; 193
    2650:	1f 4f       	sbci	r17, 0xFF	; 255
    2652:	fe 01       	movw	r30, r28
    2654:	ed 5b       	subi	r30, 0xBD	; 189
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	4a e7       	ldi	r20, 0x7A	; 122
    2666:	55 e4       	ldi	r21, 0x45	; 69
    2668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	f8 01       	movw	r30, r16
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267a:	fe 01       	movw	r30, r28
    267c:	ff 96       	adiw	r30, 0x3f	; 63
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e8       	ldi	r20, 0x80	; 128
    268c:	5f e3       	ldi	r21, 0x3F	; 63
    268e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2692:	88 23       	and	r24, r24
    2694:	2c f4       	brge	.+10     	; 0x26a0 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9e af       	std	Y+62, r25	; 0x3e
    269c:	8d af       	std	Y+61, r24	; 0x3d
    269e:	46 c0       	rjmp	.+140    	; 0x272c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    26a0:	fe 01       	movw	r30, r28
    26a2:	ff 96       	adiw	r30, 0x3f	; 63
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	64 f5       	brge	.+88     	; 0x2714 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	fe 01       	movw	r30, r28
    26be:	ed 5b       	subi	r30, 0xBD	; 189
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9e af       	std	Y+62, r25	; 0x3e
    26e8:	8d af       	std	Y+61, r24	; 0x3d
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <LCD_displayCharacter+0x478>
    26ec:	80 e9       	ldi	r24, 0x90	; 144
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	9c af       	std	Y+60, r25	; 0x3c
    26f2:	8b af       	std	Y+59, r24	; 0x3b
    26f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    26f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <LCD_displayCharacter+0x466>
    26fc:	9c af       	std	Y+60, r25	; 0x3c
    26fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	8d ad       	ldd	r24, Y+61	; 0x3d
    2702:	9e ad       	ldd	r25, Y+62	; 0x3e
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9e af       	std	Y+62, r25	; 0x3e
    2708:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	8d ad       	ldd	r24, Y+61	; 0x3d
    270c:	9e ad       	ldd	r25, Y+62	; 0x3e
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <LCD_displayCharacter+0x45a>
    2712:	16 c0       	rjmp	.+44     	; 0x2740 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	fe 01       	movw	r30, r28
    2716:	ff 96       	adiw	r30, 0x3f	; 63
    2718:	60 81       	ld	r22, Z
    271a:	71 81       	ldd	r23, Z+1	; 0x01
    271c:	82 81       	ldd	r24, Z+2	; 0x02
    271e:	93 81       	ldd	r25, Z+3	; 0x03
    2720:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9e af       	std	Y+62, r25	; 0x3e
    272a:	8d af       	std	Y+61, r24	; 0x3d
    272c:	8d ad       	ldd	r24, Y+61	; 0x3d
    272e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2730:	9a af       	std	Y+58, r25	; 0x3a
    2732:	89 af       	std	Y+57, r24	; 0x39
    2734:	89 ad       	ldd	r24, Y+57	; 0x39
    2736:	9a ad       	ldd	r25, Y+58	; 0x3a
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <LCD_displayCharacter+0x4a6>
    273c:	9a af       	std	Y+58, r25	; 0x3a
    273e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	62 e0       	ldi	r22, 0x02	; 2
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e8       	ldi	r26, 0x80	; 128
    2750:	bf e3       	ldi	r27, 0x3F	; 63
    2752:	8d ab       	std	Y+53, r24	; 0x35
    2754:	9e ab       	std	Y+54, r25	; 0x36
    2756:	af ab       	std	Y+55, r26	; 0x37
    2758:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	6d a9       	ldd	r22, Y+53	; 0x35
    275c:	7e a9       	ldd	r23, Y+54	; 0x36
    275e:	8f a9       	ldd	r24, Y+55	; 0x37
    2760:	98 ad       	ldd	r25, Y+56	; 0x38
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a e7       	ldi	r20, 0x7A	; 122
    2768:	55 e4       	ldi	r21, 0x45	; 69
    276a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	89 ab       	std	Y+49, r24	; 0x31
    2774:	9a ab       	std	Y+50, r25	; 0x32
    2776:	ab ab       	std	Y+51, r26	; 0x33
    2778:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    277a:	69 a9       	ldd	r22, Y+49	; 0x31
    277c:	7a a9       	ldd	r23, Y+50	; 0x32
    277e:	8b a9       	ldd	r24, Y+51	; 0x33
    2780:	9c a9       	ldd	r25, Y+52	; 0x34
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	98 ab       	std	Y+48, r25	; 0x30
    2798:	8f a7       	std	Y+47, r24	; 0x2f
    279a:	3f c0       	rjmp	.+126    	; 0x281a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    279c:	69 a9       	ldd	r22, Y+49	; 0x31
    279e:	7a a9       	ldd	r23, Y+50	; 0x32
    27a0:	8b a9       	ldd	r24, Y+51	; 0x33
    27a2:	9c a9       	ldd	r25, Y+52	; 0x34
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	6d a9       	ldd	r22, Y+53	; 0x35
    27b6:	7e a9       	ldd	r23, Y+54	; 0x36
    27b8:	8f a9       	ldd	r24, Y+55	; 0x37
    27ba:	98 ad       	ldd	r25, Y+56	; 0x38
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	98 ab       	std	Y+48, r25	; 0x30
    27da:	8f a7       	std	Y+47, r24	; 0x2f
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <LCD_displayCharacter+0x56a>
    27de:	80 e9       	ldi	r24, 0x90	; 144
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	9e a7       	std	Y+46, r25	; 0x2e
    27e4:	8d a7       	std	Y+45, r24	; 0x2d
    27e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    27e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_displayCharacter+0x558>
    27ee:	9e a7       	std	Y+46, r25	; 0x2e
    27f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f4:	98 a9       	ldd	r25, Y+48	; 0x30
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	98 ab       	std	Y+48, r25	; 0x30
    27fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    27fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <LCD_displayCharacter+0x54c>
    2804:	14 c0       	rjmp	.+40     	; 0x282e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	69 a9       	ldd	r22, Y+49	; 0x31
    2808:	7a a9       	ldd	r23, Y+50	; 0x32
    280a:	8b a9       	ldd	r24, Y+51	; 0x33
    280c:	9c a9       	ldd	r25, Y+52	; 0x34
    280e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	98 ab       	std	Y+48, r25	; 0x30
    2818:	8f a7       	std	Y+47, r24	; 0x2f
    281a:	8f a5       	ldd	r24, Y+47	; 0x2f
    281c:	98 a9       	ldd	r25, Y+48	; 0x30
    281e:	9c a7       	std	Y+44, r25	; 0x2c
    2820:	8b a7       	std	Y+43, r24	; 0x2b
    2822:	8b a5       	ldd	r24, Y+43	; 0x2b
    2824:	9c a5       	ldd	r25, Y+44	; 0x2c
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_displayCharacter+0x594>
    282a:	9c a7       	std	Y+44, r25	; 0x2c
    282c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	62 e0       	ldi	r22, 0x02	; 2
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	a0 e8       	ldi	r26, 0x80	; 128
    283e:	bf e3       	ldi	r27, 0x3F	; 63
    2840:	8f a3       	std	Y+39, r24	; 0x27
    2842:	98 a7       	std	Y+40, r25	; 0x28
    2844:	a9 a7       	std	Y+41, r26	; 0x29
    2846:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	6f a1       	ldd	r22, Y+39	; 0x27
    284a:	78 a5       	ldd	r23, Y+40	; 0x28
    284c:	89 a5       	ldd	r24, Y+41	; 0x29
    284e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	4a e7       	ldi	r20, 0x7A	; 122
    2856:	55 e4       	ldi	r21, 0x45	; 69
    2858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	8b a3       	std	Y+35, r24	; 0x23
    2862:	9c a3       	std	Y+36, r25	; 0x24
    2864:	ad a3       	std	Y+37, r26	; 0x25
    2866:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2868:	6b a1       	ldd	r22, Y+35	; 0x23
    286a:	7c a1       	ldd	r23, Y+36	; 0x24
    286c:	8d a1       	ldd	r24, Y+37	; 0x25
    286e:	9e a1       	ldd	r25, Y+38	; 0x26
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e8       	ldi	r20, 0x80	; 128
    2876:	5f e3       	ldi	r21, 0x3F	; 63
    2878:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    287c:	88 23       	and	r24, r24
    287e:	2c f4       	brge	.+10     	; 0x288a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9a a3       	std	Y+34, r25	; 0x22
    2886:	89 a3       	std	Y+33, r24	; 0x21
    2888:	3f c0       	rjmp	.+126    	; 0x2908 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    288a:	6b a1       	ldd	r22, Y+35	; 0x23
    288c:	7c a1       	ldd	r23, Y+36	; 0x24
    288e:	8d a1       	ldd	r24, Y+37	; 0x25
    2890:	9e a1       	ldd	r25, Y+38	; 0x26
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	3f ef       	ldi	r19, 0xFF	; 255
    2896:	4f e7       	ldi	r20, 0x7F	; 127
    2898:	57 e4       	ldi	r21, 0x47	; 71
    289a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    289e:	18 16       	cp	r1, r24
    28a0:	4c f5       	brge	.+82     	; 0x28f4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a2:	6f a1       	ldd	r22, Y+39	; 0x27
    28a4:	78 a5       	ldd	r23, Y+40	; 0x28
    28a6:	89 a5       	ldd	r24, Y+41	; 0x29
    28a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e2       	ldi	r20, 0x20	; 32
    28b0:	51 e4       	ldi	r21, 0x41	; 65
    28b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	9a a3       	std	Y+34, r25	; 0x22
    28c8:	89 a3       	std	Y+33, r24	; 0x21
    28ca:	0f c0       	rjmp	.+30     	; 0x28ea <LCD_displayCharacter+0x658>
    28cc:	80 e9       	ldi	r24, 0x90	; 144
    28ce:	91 e0       	ldi	r25, 0x01	; 1
    28d0:	98 a3       	std	Y+32, r25	; 0x20
    28d2:	8f 8f       	std	Y+31, r24	; 0x1f
    28d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28d6:	98 a1       	ldd	r25, Y+32	; 0x20
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_displayCharacter+0x646>
    28dc:	98 a3       	std	Y+32, r25	; 0x20
    28de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e0:	89 a1       	ldd	r24, Y+33	; 0x21
    28e2:	9a a1       	ldd	r25, Y+34	; 0x22
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	9a a3       	std	Y+34, r25	; 0x22
    28e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ea:	89 a1       	ldd	r24, Y+33	; 0x21
    28ec:	9a a1       	ldd	r25, Y+34	; 0x22
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	69 f7       	brne	.-38     	; 0x28cc <LCD_displayCharacter+0x63a>
    28f2:	14 c0       	rjmp	.+40     	; 0x291c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f4:	6b a1       	ldd	r22, Y+35	; 0x23
    28f6:	7c a1       	ldd	r23, Y+36	; 0x24
    28f8:	8d a1       	ldd	r24, Y+37	; 0x25
    28fa:	9e a1       	ldd	r25, Y+38	; 0x26
    28fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9a a3       	std	Y+34, r25	; 0x22
    2906:	89 a3       	std	Y+33, r24	; 0x21
    2908:	89 a1       	ldd	r24, Y+33	; 0x21
    290a:	9a a1       	ldd	r25, Y+34	; 0x22
    290c:	9e 8f       	std	Y+30, r25	; 0x1e
    290e:	8d 8f       	std	Y+29, r24	; 0x1d
    2910:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2912:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <LCD_displayCharacter+0x682>
    2918:	9e 8f       	std	Y+30, r25	; 0x1e
    291a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    291c:	fe 01       	movw	r30, r28
    291e:	ed 59       	subi	r30, 0x9D	; 157
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	98 2f       	mov	r25, r24
    2926:	91 70       	andi	r25, 0x01	; 1
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	63 e0       	ldi	r22, 0x03	; 3
    292c:	49 2f       	mov	r20, r25
    292e:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2932:	fe 01       	movw	r30, r28
    2934:	ed 59       	subi	r30, 0x9D	; 157
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	80 81       	ld	r24, Z
    293a:	88 2f       	mov	r24, r24
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	82 70       	andi	r24, 0x02	; 2
    2940:	90 70       	andi	r25, 0x00	; 0
    2942:	95 95       	asr	r25
    2944:	87 95       	ror	r24
    2946:	98 2f       	mov	r25, r24
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	64 e0       	ldi	r22, 0x04	; 4
    294c:	49 2f       	mov	r20, r25
    294e:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2952:	fe 01       	movw	r30, r28
    2954:	ed 59       	subi	r30, 0x9D	; 157
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 81       	ld	r24, Z
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	84 70       	andi	r24, 0x04	; 4
    2960:	90 70       	andi	r25, 0x00	; 0
    2962:	95 95       	asr	r25
    2964:	87 95       	ror	r24
    2966:	95 95       	asr	r25
    2968:	87 95       	ror	r24
    296a:	98 2f       	mov	r25, r24
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	65 e0       	ldi	r22, 0x05	; 5
    2970:	49 2f       	mov	r20, r25
    2972:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2976:	fe 01       	movw	r30, r28
    2978:	ed 59       	subi	r30, 0x9D	; 157
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	88 70       	andi	r24, 0x08	; 8
    2984:	90 70       	andi	r25, 0x00	; 0
    2986:	95 95       	asr	r25
    2988:	87 95       	ror	r24
    298a:	95 95       	asr	r25
    298c:	87 95       	ror	r24
    298e:	95 95       	asr	r25
    2990:	87 95       	ror	r24
    2992:	98 2f       	mov	r25, r24
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	66 e0       	ldi	r22, 0x06	; 6
    2998:	49 2f       	mov	r20, r25
    299a:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	a0 e8       	ldi	r26, 0x80	; 128
    29a4:	bf e3       	ldi	r27, 0x3F	; 63
    29a6:	89 8f       	std	Y+25, r24	; 0x19
    29a8:	9a 8f       	std	Y+26, r25	; 0x1a
    29aa:	ab 8f       	std	Y+27, r26	; 0x1b
    29ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	69 8d       	ldd	r22, Y+25	; 0x19
    29b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	4a e7       	ldi	r20, 0x7A	; 122
    29bc:	55 e4       	ldi	r21, 0x45	; 69
    29be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	8d 8b       	std	Y+21, r24	; 0x15
    29c8:	9e 8b       	std	Y+22, r25	; 0x16
    29ca:	af 8b       	std	Y+23, r26	; 0x17
    29cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ce:	6d 89       	ldd	r22, Y+21	; 0x15
    29d0:	7e 89       	ldd	r23, Y+22	; 0x16
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29e2:	88 23       	and	r24, r24
    29e4:	2c f4       	brge	.+10     	; 0x29f0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	9c 8b       	std	Y+20, r25	; 0x14
    29ec:	8b 8b       	std	Y+19, r24	; 0x13
    29ee:	3f c0       	rjmp	.+126    	; 0x2a6e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    29f0:	6d 89       	ldd	r22, Y+21	; 0x15
    29f2:	7e 89       	ldd	r23, Y+22	; 0x16
    29f4:	8f 89       	ldd	r24, Y+23	; 0x17
    29f6:	98 8d       	ldd	r25, Y+24	; 0x18
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	3f ef       	ldi	r19, 0xFF	; 255
    29fc:	4f e7       	ldi	r20, 0x7F	; 127
    29fe:	57 e4       	ldi	r21, 0x47	; 71
    2a00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a04:	18 16       	cp	r1, r24
    2a06:	4c f5       	brge	.+82     	; 0x2a5a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a08:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e2       	ldi	r20, 0x20	; 32
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	bc 01       	movw	r22, r24
    2a22:	cd 01       	movw	r24, r26
    2a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9c 8b       	std	Y+20, r25	; 0x14
    2a2e:	8b 8b       	std	Y+19, r24	; 0x13
    2a30:	0f c0       	rjmp	.+30     	; 0x2a50 <LCD_displayCharacter+0x7be>
    2a32:	80 e9       	ldi	r24, 0x90	; 144
    2a34:	91 e0       	ldi	r25, 0x01	; 1
    2a36:	9a 8b       	std	Y+18, r25	; 0x12
    2a38:	89 8b       	std	Y+17, r24	; 0x11
    2a3a:	89 89       	ldd	r24, Y+17	; 0x11
    2a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <LCD_displayCharacter+0x7ac>
    2a42:	9a 8b       	std	Y+18, r25	; 0x12
    2a44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	8b 89       	ldd	r24, Y+19	; 0x13
    2a48:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	9c 8b       	std	Y+20, r25	; 0x14
    2a4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	8b 89       	ldd	r24, Y+19	; 0x13
    2a52:	9c 89       	ldd	r25, Y+20	; 0x14
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	69 f7       	brne	.-38     	; 0x2a32 <LCD_displayCharacter+0x7a0>
    2a58:	14 c0       	rjmp	.+40     	; 0x2a82 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a60:	98 8d       	ldd	r25, Y+24	; 0x18
    2a62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
    2a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a70:	9c 89       	ldd	r25, Y+20	; 0x14
    2a72:	98 8b       	std	Y+16, r25	; 0x10
    2a74:	8f 87       	std	Y+15, r24	; 0x0f
    2a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a78:	98 89       	ldd	r25, Y+16	; 0x10
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <LCD_displayCharacter+0x7e8>
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	62 e0       	ldi	r22, 0x02	; 2
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 35 08 	call	0x106a	; 0x106a <GPIO_writePin>
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	55 e4       	ldi	r21, 0x45	; 69
    2aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_displayCharacter+0x8ac>
    2b20:	80 e9       	ldi	r24, 0x90	; 144
    2b22:	91 e0       	ldi	r25, 0x01	; 1
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_displayCharacter+0x89a>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <LCD_displayCharacter+0x88e>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_displayCharacter+0x8d6>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b70:	cd 59       	subi	r28, 0x9D	; 157
    2b72:	df 4f       	sbci	r29, 0xFF	; 255
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <LCD_displayString+0x6>
    2b8e:	0f 92       	push	r0
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	9b 83       	std	Y+3, r25	; 0x03
    2b96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2b98:	19 82       	std	Y+1, r1	; 0x01
    2b9a:	0e c0       	rjmp	.+28     	; 0x2bb8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e2 0f       	add	r30, r18
    2baa:	f3 1f       	adc	r31, r19
    2bac:	80 81       	ld	r24, Z
    2bae:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_displayCharacter>
		i++;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e2 0f       	add	r30, r18
    2bc6:	f3 1f       	adc	r31, r19
    2bc8:	80 81       	ld	r24, Z
    2bca:	88 23       	and	r24, r24
    2bcc:	39 f7       	brne	.-50     	; 0x2b9c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <LCD_moveCursor+0x6>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <LCD_moveCursor+0x8>
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	8a 83       	std	Y+2, r24	; 0x02
    2bea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	3d 83       	std	Y+5, r19	; 0x05
    2bf4:	2c 83       	std	Y+4, r18	; 0x04
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	91 05       	cpc	r25, r1
    2bfe:	c1 f0       	breq	.+48     	; 0x2c30 <LCD_moveCursor+0x56>
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	3d 81       	ldd	r19, Y+5	; 0x05
    2c04:	22 30       	cpi	r18, 0x02	; 2
    2c06:	31 05       	cpc	r19, r1
    2c08:	2c f4       	brge	.+10     	; 0x2c14 <LCD_moveCursor+0x3a>
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	61 f0       	breq	.+24     	; 0x2c2a <LCD_moveCursor+0x50>
    2c12:	19 c0       	rjmp	.+50     	; 0x2c46 <LCD_moveCursor+0x6c>
    2c14:	2c 81       	ldd	r18, Y+4	; 0x04
    2c16:	3d 81       	ldd	r19, Y+5	; 0x05
    2c18:	22 30       	cpi	r18, 0x02	; 2
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	69 f0       	breq	.+26     	; 0x2c38 <LCD_moveCursor+0x5e>
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	9d 81       	ldd	r25, Y+5	; 0x05
    2c22:	83 30       	cpi	r24, 0x03	; 3
    2c24:	91 05       	cpc	r25, r1
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <LCD_moveCursor+0x66>
    2c28:	0e c0       	rjmp	.+28     	; 0x2c46 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	0b c0       	rjmp	.+22     	; 0x2c46 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	80 5c       	subi	r24, 0xC0	; 192
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	07 c0       	rjmp	.+14     	; 0x2c46 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	80 5f       	subi	r24, 0xF0	; 240
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	03 c0       	rjmp	.+6      	; 0x2c46 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	80 5b       	subi	r24, 0xB0	; 176
    2c44:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <LCD_displayStringRowColumn+0x6>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <LCD_displayStringRowColumn+0x8>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	6a 83       	std	Y+2, r22	; 0x02
    2c6e:	5c 83       	std	Y+4, r21	; 0x04
    2c70:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	6a 81       	ldd	r22, Y+2	; 0x02
    2c76:	0e 94 ed 15 	call	0x2bda	; 0x2bda <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayString>
}
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	62 97       	sbiw	r28, 0x12	; 18
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	9a 8b       	std	Y+18, r25	; 0x12
    2ca6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ca8:	89 89       	ldd	r24, Y+17	; 0x11
    2caa:	9a 89       	ldd	r25, Y+18	; 0x12
    2cac:	9e 01       	movw	r18, r28
    2cae:	2f 5f       	subi	r18, 0xFF	; 255
    2cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb2:	b9 01       	movw	r22, r18
    2cb4:	4a e0       	ldi	r20, 0x0A	; 10
    2cb6:	50 e0       	ldi	r21, 0x00	; 0
    2cb8:	0e 94 08 17 	call	0x2e10	; 0x2e10 <itoa>
   LCD_displayString(buff); /* Display the string */
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayString>
}
    2cc4:	62 96       	adiw	r28, 0x12	; 18
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 ce 0c 	call	0x199c	; 0x199c <LCD_sendCommand>
}
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <__mulsi3>:
    2cea:	62 9f       	mul	r22, r18
    2cec:	d0 01       	movw	r26, r0
    2cee:	73 9f       	mul	r23, r19
    2cf0:	f0 01       	movw	r30, r0
    2cf2:	82 9f       	mul	r24, r18
    2cf4:	e0 0d       	add	r30, r0
    2cf6:	f1 1d       	adc	r31, r1
    2cf8:	64 9f       	mul	r22, r20
    2cfa:	e0 0d       	add	r30, r0
    2cfc:	f1 1d       	adc	r31, r1
    2cfe:	92 9f       	mul	r25, r18
    2d00:	f0 0d       	add	r31, r0
    2d02:	83 9f       	mul	r24, r19
    2d04:	f0 0d       	add	r31, r0
    2d06:	74 9f       	mul	r23, r20
    2d08:	f0 0d       	add	r31, r0
    2d0a:	65 9f       	mul	r22, r21
    2d0c:	f0 0d       	add	r31, r0
    2d0e:	99 27       	eor	r25, r25
    2d10:	72 9f       	mul	r23, r18
    2d12:	b0 0d       	add	r27, r0
    2d14:	e1 1d       	adc	r30, r1
    2d16:	f9 1f       	adc	r31, r25
    2d18:	63 9f       	mul	r22, r19
    2d1a:	b0 0d       	add	r27, r0
    2d1c:	e1 1d       	adc	r30, r1
    2d1e:	f9 1f       	adc	r31, r25
    2d20:	bd 01       	movw	r22, r26
    2d22:	cf 01       	movw	r24, r30
    2d24:	11 24       	eor	r1, r1
    2d26:	08 95       	ret

00002d28 <__divmodsi4>:
    2d28:	97 fb       	bst	r25, 7
    2d2a:	09 2e       	mov	r0, r25
    2d2c:	05 26       	eor	r0, r21
    2d2e:	0e d0       	rcall	.+28     	; 0x2d4c <__divmodsi4_neg1>
    2d30:	57 fd       	sbrc	r21, 7
    2d32:	04 d0       	rcall	.+8      	; 0x2d3c <__divmodsi4_neg2>
    2d34:	14 d0       	rcall	.+40     	; 0x2d5e <__udivmodsi4>
    2d36:	0a d0       	rcall	.+20     	; 0x2d4c <__divmodsi4_neg1>
    2d38:	00 1c       	adc	r0, r0
    2d3a:	38 f4       	brcc	.+14     	; 0x2d4a <__divmodsi4_exit>

00002d3c <__divmodsi4_neg2>:
    2d3c:	50 95       	com	r21
    2d3e:	40 95       	com	r20
    2d40:	30 95       	com	r19
    2d42:	21 95       	neg	r18
    2d44:	3f 4f       	sbci	r19, 0xFF	; 255
    2d46:	4f 4f       	sbci	r20, 0xFF	; 255
    2d48:	5f 4f       	sbci	r21, 0xFF	; 255

00002d4a <__divmodsi4_exit>:
    2d4a:	08 95       	ret

00002d4c <__divmodsi4_neg1>:
    2d4c:	f6 f7       	brtc	.-4      	; 0x2d4a <__divmodsi4_exit>
    2d4e:	90 95       	com	r25
    2d50:	80 95       	com	r24
    2d52:	70 95       	com	r23
    2d54:	61 95       	neg	r22
    2d56:	7f 4f       	sbci	r23, 0xFF	; 255
    2d58:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5c:	08 95       	ret

00002d5e <__udivmodsi4>:
    2d5e:	a1 e2       	ldi	r26, 0x21	; 33
    2d60:	1a 2e       	mov	r1, r26
    2d62:	aa 1b       	sub	r26, r26
    2d64:	bb 1b       	sub	r27, r27
    2d66:	fd 01       	movw	r30, r26
    2d68:	0d c0       	rjmp	.+26     	; 0x2d84 <__udivmodsi4_ep>

00002d6a <__udivmodsi4_loop>:
    2d6a:	aa 1f       	adc	r26, r26
    2d6c:	bb 1f       	adc	r27, r27
    2d6e:	ee 1f       	adc	r30, r30
    2d70:	ff 1f       	adc	r31, r31
    2d72:	a2 17       	cp	r26, r18
    2d74:	b3 07       	cpc	r27, r19
    2d76:	e4 07       	cpc	r30, r20
    2d78:	f5 07       	cpc	r31, r21
    2d7a:	20 f0       	brcs	.+8      	; 0x2d84 <__udivmodsi4_ep>
    2d7c:	a2 1b       	sub	r26, r18
    2d7e:	b3 0b       	sbc	r27, r19
    2d80:	e4 0b       	sbc	r30, r20
    2d82:	f5 0b       	sbc	r31, r21

00002d84 <__udivmodsi4_ep>:
    2d84:	66 1f       	adc	r22, r22
    2d86:	77 1f       	adc	r23, r23
    2d88:	88 1f       	adc	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	1a 94       	dec	r1
    2d8e:	69 f7       	brne	.-38     	; 0x2d6a <__udivmodsi4_loop>
    2d90:	60 95       	com	r22
    2d92:	70 95       	com	r23
    2d94:	80 95       	com	r24
    2d96:	90 95       	com	r25
    2d98:	9b 01       	movw	r18, r22
    2d9a:	ac 01       	movw	r20, r24
    2d9c:	bd 01       	movw	r22, r26
    2d9e:	cf 01       	movw	r24, r30
    2da0:	08 95       	ret

00002da2 <__prologue_saves__>:
    2da2:	2f 92       	push	r2
    2da4:	3f 92       	push	r3
    2da6:	4f 92       	push	r4
    2da8:	5f 92       	push	r5
    2daa:	6f 92       	push	r6
    2dac:	7f 92       	push	r7
    2dae:	8f 92       	push	r8
    2db0:	9f 92       	push	r9
    2db2:	af 92       	push	r10
    2db4:	bf 92       	push	r11
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	ca 1b       	sub	r28, r26
    2dcc:	db 0b       	sbc	r29, r27
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	09 94       	ijmp

00002dda <__epilogue_restores__>:
    2dda:	2a 88       	ldd	r2, Y+18	; 0x12
    2ddc:	39 88       	ldd	r3, Y+17	; 0x11
    2dde:	48 88       	ldd	r4, Y+16	; 0x10
    2de0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2de2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2de4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2de6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2de8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dec:	b9 84       	ldd	r11, Y+9	; 0x09
    2dee:	c8 84       	ldd	r12, Y+8	; 0x08
    2df0:	df 80       	ldd	r13, Y+7	; 0x07
    2df2:	ee 80       	ldd	r14, Y+6	; 0x06
    2df4:	fd 80       	ldd	r15, Y+5	; 0x05
    2df6:	0c 81       	ldd	r16, Y+4	; 0x04
    2df8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dfa:	aa 81       	ldd	r26, Y+2	; 0x02
    2dfc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dfe:	ce 0f       	add	r28, r30
    2e00:	d1 1d       	adc	r29, r1
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	ed 01       	movw	r28, r26
    2e0e:	08 95       	ret

00002e10 <itoa>:
    2e10:	fb 01       	movw	r30, r22
    2e12:	9f 01       	movw	r18, r30
    2e14:	e8 94       	clt
    2e16:	42 30       	cpi	r20, 0x02	; 2
    2e18:	c4 f0       	brlt	.+48     	; 0x2e4a <itoa+0x3a>
    2e1a:	45 32       	cpi	r20, 0x25	; 37
    2e1c:	b4 f4       	brge	.+44     	; 0x2e4a <itoa+0x3a>
    2e1e:	4a 30       	cpi	r20, 0x0A	; 10
    2e20:	29 f4       	brne	.+10     	; 0x2e2c <itoa+0x1c>
    2e22:	97 fb       	bst	r25, 7
    2e24:	1e f4       	brtc	.+6      	; 0x2e2c <itoa+0x1c>
    2e26:	90 95       	com	r25
    2e28:	81 95       	neg	r24
    2e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e2c:	64 2f       	mov	r22, r20
    2e2e:	77 27       	eor	r23, r23
    2e30:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__udivmodhi4>
    2e34:	80 5d       	subi	r24, 0xD0	; 208
    2e36:	8a 33       	cpi	r24, 0x3A	; 58
    2e38:	0c f0       	brlt	.+2      	; 0x2e3c <itoa+0x2c>
    2e3a:	89 5d       	subi	r24, 0xD9	; 217
    2e3c:	81 93       	st	Z+, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	a1 f7       	brne	.-24     	; 0x2e2c <itoa+0x1c>
    2e44:	16 f4       	brtc	.+4      	; 0x2e4a <itoa+0x3a>
    2e46:	5d e2       	ldi	r21, 0x2D	; 45
    2e48:	51 93       	st	Z+, r21
    2e4a:	10 82       	st	Z, r1
    2e4c:	c9 01       	movw	r24, r18
    2e4e:	0c 94 29 17 	jmp	0x2e52	; 0x2e52 <strrev>

00002e52 <strrev>:
    2e52:	dc 01       	movw	r26, r24
    2e54:	fc 01       	movw	r30, r24
    2e56:	67 2f       	mov	r22, r23
    2e58:	71 91       	ld	r23, Z+
    2e5a:	77 23       	and	r23, r23
    2e5c:	e1 f7       	brne	.-8      	; 0x2e56 <strrev+0x4>
    2e5e:	32 97       	sbiw	r30, 0x02	; 2
    2e60:	04 c0       	rjmp	.+8      	; 0x2e6a <strrev+0x18>
    2e62:	7c 91       	ld	r23, X
    2e64:	6d 93       	st	X+, r22
    2e66:	70 83       	st	Z, r23
    2e68:	62 91       	ld	r22, -Z
    2e6a:	ae 17       	cp	r26, r30
    2e6c:	bf 07       	cpc	r27, r31
    2e6e:	c8 f3       	brcs	.-14     	; 0x2e62 <strrev+0x10>
    2e70:	08 95       	ret

00002e72 <__udivmodhi4>:
    2e72:	aa 1b       	sub	r26, r26
    2e74:	bb 1b       	sub	r27, r27
    2e76:	51 e1       	ldi	r21, 0x11	; 17
    2e78:	07 c0       	rjmp	.+14     	; 0x2e88 <__udivmodhi4_ep>

00002e7a <__udivmodhi4_loop>:
    2e7a:	aa 1f       	adc	r26, r26
    2e7c:	bb 1f       	adc	r27, r27
    2e7e:	a6 17       	cp	r26, r22
    2e80:	b7 07       	cpc	r27, r23
    2e82:	10 f0       	brcs	.+4      	; 0x2e88 <__udivmodhi4_ep>
    2e84:	a6 1b       	sub	r26, r22
    2e86:	b7 0b       	sbc	r27, r23

00002e88 <__udivmodhi4_ep>:
    2e88:	88 1f       	adc	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	5a 95       	dec	r21
    2e8e:	a9 f7       	brne	.-22     	; 0x2e7a <__udivmodhi4_loop>
    2e90:	80 95       	com	r24
    2e92:	90 95       	com	r25
    2e94:	bc 01       	movw	r22, r24
    2e96:	cd 01       	movw	r24, r26
    2e98:	08 95       	ret

00002e9a <_exit>:
    2e9a:	f8 94       	cli

00002e9c <__stop_program>:
    2e9c:	ff cf       	rjmp	.-2      	; 0x2e9c <__stop_program>
